/*
 * FIWARENGSIV2SpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package org.fiware.lab.orion.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.fiware.lab.orion.ApiHelper;
import org.fiware.lab.orion.FIWARENGSIV2SpecificationClient;
import org.fiware.lab.orion.exceptions.ApiException;
import org.fiware.lab.orion.models.CreateSubscriptionRequest;
import org.fiware.lab.orion.models.ListSubscriptionsResponse;
import org.fiware.lab.orion.models.Options8Enum;
import org.fiware.lab.orion.models.UpdateSubscriptionRequest;
import org.fiware.lab.orion.testing.TestHelper;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class SubscriptionsControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static FIWARENGSIV2SpecificationClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static SubscriptionsController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getSubscriptionsController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * Returns a list of all the subscriptions present in the system. Response: * Successful
     * operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See
     * subsection on "Error Responses" for more details.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testListSubscriptions1() throws Exception {
        // Parameters for the API call
        Double limit = 10d;
        Double offset = 20d;
        Options8Enum options = null;

        // Set callback and perform API call
        List<ListSubscriptionsResponse> result = null;
        try {
            result = controller.listSubscriptions(limit, offset, options);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys",
                TestHelper.isArrayOfJsonObjectsProperSubsetOf(
                "[  {    \"id\": \"abcdefg\",    \"description\": \"One subscription to rule them a"
                + "ll\",    \"subject\": {                          \"entities\": [        {       "
                + "   \"id\": \"Bcn_Welt\",          \"type\": \"Room\"        }      ],      \"con"
                + "dition\": {         \"attrs\": [ \"temperature \" ],         \"expression\": {  "
                + "          \"q\": \"temperature>40\"         }      }    },    \"notification\": "
                + "{      \"httpCustom\": {        \"url\": \"http://localhost:1234\",        \"hea"
                + "ders\": {          \"X-MyHeader\": \"foo\"        },        \"qs\": {          "
                + "\"authToken\": \"bar\"        }      },      \"attrsFormat\": \"keyValues\",    "
                + "  \"attrs\": [\"temperature\", \"humidity\"],      \"timesSent\": 12,      \"las"
                + "tNotification\": \"2015-10-05T16:00:00.00Z\",      \"lastFailure\": \"2015-10-06"
                + "T16:00:00.00Z\"    },    \"expires\": \"2016-04-05T14:00:00.00Z\",    \"status"
                + "\": \"failed\",    \"throttling\": 5  }]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * Creates a new subscription. The subscription is represented by a JSON object as described at
     * the beginning of this section. Response: * Successful operation uses 201 Created * Errors use
     * a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for more
     * details.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testCreateSubscription1() throws Exception {
        // Parameters for the API call
        CreateSubscriptionRequest body = ApiHelper.deserialize(
                "{  \"description\": \"One subscription to rule them all\",  \"subject\": {    \"en"
                + "tities\": [      {        \"idPattern\": \".*\",        \"type\": \"Room\"      "
                + "}    ],    \"condition\": {      \"attrs\": [ \"temperature\" ],      \"expressi"
                + "on\": {        \"q\": \"temperature>40\"      }    }  },  \"notification\": {   "
                + " \"http\": {      \"url\": \"http://localhost:1234\"    },    \"attrs\": [\"temp"
                + "erature\", \"humidity\"]  },              \"expires\": \"2016-04-05T14:00:00.00Z"
                + "\",  \"throttling\": 5}",
                CreateSubscriptionRequest.class);

        // Set callback and perform API call
        try {
            controller.createSubscription(body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 201", 
                201, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Location", TestHelper.nullString);
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

    }

    /**
     * Only the fields included in the request are updated in the subscription. Response: *
     * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error
     * payload. See subsection on "Error Responses" for more details.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testUpdateSubscription1() throws Exception {
        // Parameters for the API call
        String subscriptionId = 
                "abcdef";
        UpdateSubscriptionRequest body = ApiHelper.deserialize(
                "{  \"expires\": \"2016-04-05T14:00:00.00Z\"}",
                UpdateSubscriptionRequest.class);

        // Set callback and perform API call
        try {
            controller.updateSubscription(subscriptionId, body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 204", 
                204, httpResponse.getResponse().getStatusCode());

    }

    /**
     * Cancels subscription. Response: * Successful operation uses 204 No Content * Errors use a
     * non-2xx and (optionally) an error payload. See subsection on "Error Responses" for more
     * details.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testDeleteSubscription1() throws Exception {
        // Parameters for the API call
        String subscriptionId = 
                "abcdef";

        // Set callback and perform API call
        try {
            controller.deleteSubscription(subscriptionId);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 204", 
                204, httpResponse.getResponse().getStatusCode());

    }

}
