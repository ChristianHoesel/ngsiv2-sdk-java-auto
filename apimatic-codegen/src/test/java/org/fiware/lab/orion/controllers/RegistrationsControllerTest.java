/*
 * FIWARENGSIV2SpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package org.fiware.lab.orion.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.fiware.lab.orion.ApiHelper;
import org.fiware.lab.orion.FIWARENGSIV2SpecificationClient;
import org.fiware.lab.orion.exceptions.ApiException;
import org.fiware.lab.orion.models.CreateRegistrationRequest;
import org.fiware.lab.orion.models.ListRegistrationsResponse;
import org.fiware.lab.orion.models.Options8Enum;
import org.fiware.lab.orion.models.RetrieveRegistrationResponse;
import org.fiware.lab.orion.models.UpdateRegistrationRequest;
import org.fiware.lab.orion.testing.TestHelper;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class RegistrationsControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static FIWARENGSIV2SpecificationClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static RegistrationsController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getRegistrationsController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * Lists all the context provider registrations present in the system.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testListRegistrations1() throws Exception {
        // Parameters for the API call
        Double limit = 10d;
        Double offset = 20d;
        Options8Enum options = null;

        // Set callback and perform API call
        List<ListRegistrationsResponse> result = null;
        try {
            result = controller.listRegistrations(limit, offset, options);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys",
                TestHelper.isArrayOfJsonObjectsProperSubsetOf(
                "[  {    \"id\": \"abcdefg\",    \"description\": \"Example Context Source\",    "
                + "\"dataProvided\": {      \"entities\": [        {          \"id\": \"Bcn_Welt\","
                + "          \"type\": \"Room\"        }      ],      \"attrs\": [        \"tempera"
                + "ture\"      ]    },    \"provider\": {      \"http\": {        \"url\": \"http:/"
                + "/contextsource.example.org\"      },      \"supportedForwardingMode\": \"all\"  "
                + "  },    \"expires\": \"2017-10-31T12:00:00\",    \"status\": \"active\",    \"fo"
                + "rwardingInformation\": {      \"timesSent\": 12,      \"lastForwarding\": \"2017"
                + "-10-06T16:00:00.00Z\",      \"lastSuccess\": \"2017-10-06T16:00:00.00Z\",      "
                + "\"lastFailure\": \"2017-10-05T16:00:00.00Z\"    }  }]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * Creates a new context provider registration. This is typically used for binding context
     * sources as providers of certain data. The registration is represented by a JSON object as
     * described at the beginning of this section. Response: * Successful operation uses 201 Created
     * * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses"
     * for more details.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testCreateRegistration1() throws Exception {
        // Parameters for the API call
        CreateRegistrationRequest body = ApiHelper.deserialize(
                "{  \"description\": \"Relative Humidity Context Source\",  \"dataProvided\": {    "
                + "\"entities\": [      {        \"id\": \"room2\",        \"type\": \"Room\"      "
                + "}    ],    \"attrs\": [      \"relativeHumidity\"    ]  },  \"provider\": {    "
                + "\"http\":{       \"url\": \"http://localhost:1234\"    }  }}",
                CreateRegistrationRequest.class);

        // Set callback and perform API call
        try {
            controller.createRegistration(body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 201", 
                201, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Location", TestHelper.nullString);
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

    }

    /**
     * The response is the registration represented by a JSON object as described at the beginning
     * of this section. Response: * Successful operation uses 200 OK * Errors use a non-2xx and
     * (optionally) an error payload. See subsection on "Error Responses" for more details.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testRetrieveRegistration1() throws Exception {
        // Parameters for the API call
        String registrationId = 
                "abcdef";

        // Set callback and perform API call
        RetrieveRegistrationResponse result = null;
        try {
            result = controller.retrieveRegistration(registrationId);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", TestHelper.nullString);
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "  {        \"id\": \"abcdefg\",        \"description\": \"Example Context Source"
                + "\",        \"dataProvided\": {          \"entities\": [            {            "
                + "  \"id\": \"Bcn_Welt\",              \"type\": \"Room\"            }          ],"
                + "          \"attrs\": [            \"temperature\"          ]        },        "
                + "\"provider\": {          \"http\": {            \"url\": \"http://contextsource."
                + "example.org\"          },          \"supportedForwardingMode\": \"all\"        }"
                + ",        \"expires\": \"2017-10-31T12:00:00\",        \"status\": \"failed\",   "
                + "     \"forwardingInformation\": {          \"timesSent\": 12,          \"lastFor"
                + "warding\": \"2017-10-06T16:00:00.00Z\",          \"lastFailure\": \"2017-10-06T1"
                + "6:00:00.00Z\",          \"lastSuccess\": \"2017-10-05T18:25:00.00Z\",        }  "
                + "}      ",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * Only the fields included in the request are updated in the registration. Response: *
     * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error
     * payload. See subsection on "Error Responses" for more details.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testUpdateRegistration1() throws Exception {
        // Parameters for the API call
        String registrationId = 
                "abcdef";
        UpdateRegistrationRequest body = ApiHelper.deserialize(
                "{    \"expires\": \"2017-10-04T00:00:00\"}",
                UpdateRegistrationRequest.class);

        // Set callback and perform API call
        try {
            controller.updateRegistration(registrationId, body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 204", 
                204, httpResponse.getResponse().getStatusCode());

    }

    /**
     * Cancels a context provider registration. Response: * Successful operation uses 204 No Content
     * * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses"
     * for more details.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testDeleteRegistration1() throws Exception {
        // Parameters for the API call
        String registrationId = 
                "abcdef";

        // Set callback and perform API call
        try {
            controller.deleteRegistration(registrationId);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 204", 
                204, httpResponse.getResponse().getStatusCode());

    }

}
