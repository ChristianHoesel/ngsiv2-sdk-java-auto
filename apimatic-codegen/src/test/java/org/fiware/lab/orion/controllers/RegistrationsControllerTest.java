/*
 * FIWARENGSIV2SpecificationLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package org.fiware.lab.orion.controllers;

import static org.junit.Assert.*;

import java.io.*;
import java.util.*;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import org.fiware.lab.orion.models.*;
import org.fiware.lab.orion.exceptions.*;
import org.fiware.lab.orion.APIHelper;
import org.fiware.lab.orion.Configuration;
import org.fiware.lab.orion.testing.TestHelper;
import org.fiware.lab.orion.controllers.RegistrationsController;

import com.fasterxml.jackson.core.type.TypeReference;

public class RegistrationsControllerTest extends ControllerTestBase {
    
    /**
     * Controller instance (for all tests)
     */
    private static RegistrationsController controller;
    
    /**
     * Setup test class
     */
    @BeforeClass
    public static void setUpClass() {
        controller = getClient().getRegistrations();
    }

    /**
     * Tear down test class
     * @throws IOException
     */
    @AfterClass
    public static void tearDownClass() throws IOException {
        controller = null;
    }

    /**
     * Lists all the context provider registrations present in the system.
     * @throws Throwable
     */
    @Test
    public void testListRegistrations1() throws Throwable {
        // Parameters for the API call
        Double limit = 10d;
        Double offset = 20d;
        Options8Enum options = null;

        // Set callback and perform API call
        List<ListRegistrationsResponse> result = null;
        controller.setHttpCallBack(httpResponse);
        try {
            result = controller.listRegistrations(limit, offset, options);
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", TestHelper.isArrayOfJsonObjectsProperSubsetOf(
                "[  {    \"id\": \"abcdefg\",    \"description\": \"Example Context Source\",    \"dataProvided\": {      \"entities\": [        {          \"id\": \"Bcn_Welt\",          \"type\": \"Room\"        }      ],      \"attrs\": [        \"temperature\"      ]    },    \"provider\": {      \"http\": {        \"url\": \"http://contextsource.example.org\"      },      \"supportedForwardingMode\": \"all\"    },    \"expires\": \"2017-10-31T12:00:00\",    \"status\": \"active\",    \"forwardingInformation\": {      \"timesSent\": 12,      \"lastForwarding\": \"2017-10-06T16:00:00.00Z\",      \"lastSuccess\": \"2017-10-06T16:00:00.00Z\",      \"lastFailure\": \"2017-10-05T16:00:00.00Z\"    }  }]", 
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * Creates a new context provider registration. This is typically used for binding context sources
as providers of certain data.
The registration is represented by a JSON object as described at the beginning of this section.

Response:

* Successful operation uses 201 Created

* Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
  more details.
     * @throws Throwable
     */
    @Test
    public void testCreateRegistration1() throws Throwable {
        // Parameters for the API call
        String contentType = "application/json";
        CreateRegistrationRequest body = APIHelper.deserialize("{  \"description\": \"Relative Humidity Context Source\",  \"dataProvided\": {    \"entities\": [      {        \"id\": \"room2\",        \"type\": \"Room\"      }    ],    \"attrs\": [      \"relativeHumidity\"    ]  },  \"provider\": {    \"http\":{       \"url\": \"http://localhost:1234\"    }  }}", new TypeReference<CreateRegistrationRequest>(){});

        // Set callback and perform API call
        controller.setHttpCallBack(httpResponse);
        try {
        controller.createRegistration(contentType, body);
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 201", 
                201, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Location", TestHelper.nullString);
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders(), true));

    }

    /**
     * The response is the registration represented by a JSON object as described at the beginning of this
section.

Response:

* Successful operation uses 200 OK

* Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
  more details.
     * @throws Throwable
     */
    @Test
    public void testRetrieveRegistration1() throws Throwable {
        // Parameters for the API call
        String registrationId = "abcdef";

        // Set callback and perform API call
        RetrieveRegistrationResponse result = null;
        controller.setHttpCallBack(httpResponse);
        try {
            result = controller.retrieveRegistration(registrationId);
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", TestHelper.nullString);
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", TestHelper.isJsonObjectProperSubsetOf(
                "  {        \"id\": \"abcdefg\",        \"description\": \"Example Context Source\",        \"dataProvided\": {          \"entities\": [            {              \"id\": \"Bcn_Welt\",              \"type\": \"Room\"            }          ],          \"attrs\": [            \"temperature\"          ]        },        \"provider\": {          \"http\": {            \"url\": \"http://contextsource.example.org\"          },          \"supportedForwardingMode\": \"all\"        },        \"expires\": \"2017-10-31T12:00:00\",        \"status\": \"failed\",        \"forwardingInformation\": {          \"timesSent\": 12,          \"lastForwarding\": \"2017-10-06T16:00:00.00Z\",          \"lastFailure\": \"2017-10-06T16:00:00.00Z\",          \"lastSuccess\": \"2017-10-05T18:25:00.00Z\",        }  }      ", 
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * Only the fields included in the request are updated in the registration.

Response:

* Successful operation uses 204 No Content

* Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
  more details.
     * @throws Throwable
     */
    @Test
    public void testUpdateRegistration1() throws Throwable {
        // Parameters for the API call
        String registrationId = "abcdef";
        String contentType = "application/json";
        UpdateRegistrationRequest body = APIHelper.deserialize("{    \"expires\": \"2017-10-04T00:00:00\"}", new TypeReference<UpdateRegistrationRequest>(){});

        // Set callback and perform API call
        controller.setHttpCallBack(httpResponse);
        try {
        controller.updateRegistration(registrationId, contentType, body);
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 204", 
                204, httpResponse.getResponse().getStatusCode());

    }

    /**
     * Cancels a context provider registration.

Response:

* Successful operation uses 204 No Content

* Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
  more details.
     * @throws Throwable
     */
    @Test
    public void testDeleteRegistration1() throws Throwable {
        // Parameters for the API call
        String registrationId = "abcdef";

        // Set callback and perform API call
        controller.setHttpCallBack(httpResponse);
        try {
        controller.deleteRegistration(registrationId);
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 204", 
                204, httpResponse.getResponse().getStatusCode());

    }

}
