/*
 * FIWARENGSIV2SpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package org.fiware.lab.orion.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.util.LinkedHashMap;
import java.util.Map;
import org.fiware.lab.orion.ApiHelper;
import org.fiware.lab.orion.FIWARENGSIV2SpecificationClient;
import org.fiware.lab.orion.exceptions.ApiException;
import org.fiware.lab.orion.models.GetAttributeDataResponse;
import org.fiware.lab.orion.models.UpdateAttributeDataRequest;
import org.fiware.lab.orion.testing.TestHelper;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class AttributesControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static FIWARENGSIV2SpecificationClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static AttributesController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getAttributesController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * Returns a JSON object with the attribute data of the attribute. The object follows the JSON
     * representation for attributes (described in "JSON Attribute Representation" section).
     * Response: * Successful operation uses 200 OK. * Errors use a non-2xx and (optionally) an
     * error payload. See subsection on "Error Responses" for more details.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAttributeData1() throws Exception {
        // Parameters for the API call
        String entityId = 
                "Bcn_Welt";
        String attrName = 
                "temperature";
        String type = null;
        String metadata = 
                "accuracy";

        // Set callback and perform API call
        GetAttributeDataResponse result = null;
        try {
            result = controller.getAttributeData(entityId, attrName, type, metadata);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", TestHelper.nullString);
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{  \"value\": 21.7,  \"type\": \"Number\",  \"metadata\": {}}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * The request payload is an object representing the new attribute data. Previous attribute data
     * is replaced by the one in the request. The object follows the JSON representation for
     * attributes (described in "JSON Attribute Representation" section). Response: * Successful
     * operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See
     * subsection on "Error Responses" for more details.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testUpdateAttributeData1() throws Exception {
        // Parameters for the API call
        String entityId = 
                "Bcn_Welt";
        String attrName = 
                "temperature";
        UpdateAttributeDataRequest body = ApiHelper.deserialize(
                "{  \"value\": 25.0,  \"metadata\": {    \"unitCode\": {      \"value\": \"CEL\"   "
                + " }  }}",
                UpdateAttributeDataRequest.class);
        String type = null;

        // Set callback and perform API call
        try {
            controller.updateAttributeData(entityId, attrName, body, type);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

    }

    /**
     * Removes an entity attribute. Response: * Successful operation uses 204 No Content * Errors
     * use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for more
     * details.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testRemoveASingleAttribute1() throws Exception {
        // Parameters for the API call
        String entityId = 
                "Bcn_Welt";
        String attrName = 
                "temperature";
        String type = null;

        // Set callback and perform API call
        try {
            controller.removeASingleAttribute(entityId, attrName, type);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 204", 
                204, httpResponse.getResponse().getStatusCode());

    }

}
