/*
 * FIWARENGSIV2SpecificationLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package org.fiware.lab.orion.controllers;

import static org.junit.Assert.*;

import java.io.*;
import java.util.*;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import org.fiware.lab.orion.models.*;
import org.fiware.lab.orion.exceptions.*;
import org.fiware.lab.orion.APIHelper;
import org.fiware.lab.orion.Configuration;
import org.fiware.lab.orion.testing.TestHelper;
import org.fiware.lab.orion.controllers.AttributesController;

import com.fasterxml.jackson.core.type.TypeReference;

public class AttributesControllerTest extends ControllerTestBase {
    
    /**
     * Controller instance (for all tests)
     */
    private static AttributesController controller;
    
    /**
     * Setup test class
     */
    @BeforeClass
    public static void setUpClass() {
        controller = getClient().getAttributes();
    }

    /**
     * Tear down test class
     * @throws IOException
     */
    @AfterClass
    public static void tearDownClass() throws IOException {
        controller = null;
    }

    /**
     * Returns a JSON object with the attribute data of the attribute. The object follows the JSON
representation for attributes (described in "JSON Attribute Representation" section).

Response:

* Successful operation uses 200 OK.

* Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
  more details.
     * @throws Throwable
     */
    @Test
    public void testGetAttributeData1() throws Throwable {
        // Parameters for the API call
        String entityId = "Bcn_Welt";
        String attrName = "temperature";
        String type = null;
        String metadata = "accuracy";

        // Set callback and perform API call
        GetAttributeDataResponse result = null;
        controller.setHttpCallBack(httpResponse);
        try {
            result = controller.getAttributeData(entityId, attrName, type, metadata);
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", TestHelper.nullString);
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", TestHelper.isJsonObjectProperSubsetOf(
                "{  \"value\": 21.7,  \"type\": \"Number\",  \"metadata\": {}}", 
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * The request payload is an object representing the new attribute data. Previous attribute data
is replaced by the one in the request. The object follows the JSON representation for attributes
(described in "JSON Attribute Representation" section).

Response:

* Successful operation uses 204 No Content

* Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
  more details.
     * @throws Throwable
     */
    @Test
    public void testUpdateAttributeData1() throws Throwable {
        // Parameters for the API call
        String entityId = "Bcn_Welt";
        String attrName = "temperature";
        String contentType = "application/json";
        UpdateAttributeDataRequest body = APIHelper.deserialize("{  \"value\": 25.0,  \"metadata\": {    \"unitCode\": {      \"value\": \"CEL\"    }  }}", new TypeReference<UpdateAttributeDataRequest>(){});
        String type = null;

        // Set callback and perform API call
        controller.setHttpCallBack(httpResponse);
        try {
        controller.updateAttributeData(entityId, attrName, contentType, body, type);
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

    }

    /**
     * Removes an entity attribute.

Response:

* Successful operation uses 204 No Content

* Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
  more details.
     * @throws Throwable
     */
    @Test
    public void testRemoveASingleAttribute1() throws Throwable {
        // Parameters for the API call
        String entityId = "Bcn_Welt";
        String attrName = "temperature";
        String type = null;

        // Set callback and perform API call
        controller.setHttpCallBack(httpResponse);
        try {
        controller.removeASingleAttribute(entityId, attrName, type);
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 204", 
                204, httpResponse.getResponse().getStatusCode());

    }

}
