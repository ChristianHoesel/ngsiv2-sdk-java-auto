/*
 * FIWARENGSIV2SpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package org.fiware.lab.orion.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.util.LinkedHashMap;
import java.util.Map;
import org.fiware.lab.orion.FIWARENGSIV2SpecificationClient;
import org.fiware.lab.orion.exceptions.ApiException;
import org.fiware.lab.orion.models.RetrieveAPIResourcesResponse;
import org.fiware.lab.orion.testing.TestHelper;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class APIEntryPointControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static FIWARENGSIV2SpecificationClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static APIEntryPointController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getAPIEntryPointController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * This resource does not have any attributes. Instead it offers the initial API affordances in
     * the form of the links in the JSON body. It is recommended to follow the “url” link values,
     * [Link](https://tools.ietf.org/html/rfc5988) or Location headers where applicable to retrieve
     * resources. Instead of constructing your own URLs, to keep your client decoupled from
     * implementation details.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testRetrieveAPIResources1() throws Exception {

        // Set callback and perform API call
        RetrieveAPIResourcesResponse result = null;
        try {
            result = controller.retrieveAPIResources();
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", TestHelper.nullString);
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{  \"entities_url\": \"/v2/entities\",  \"types_url\": \"/v2/types\",  \"subscript"
                + "ions_url\": \"/v2/subscriptions\",  \"registrations_url\": \"/v2/registrations"
                + "\"}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

}
