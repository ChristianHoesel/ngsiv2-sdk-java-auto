/*
 * FIWARENGSIV2SpecificationLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package org.fiware.lab.orion.controllers;

import static org.junit.Assert.*;

import java.io.*;
import java.util.*;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import org.fiware.lab.orion.models.*;
import org.fiware.lab.orion.exceptions.*;
import org.fiware.lab.orion.APIHelper;
import org.fiware.lab.orion.Configuration;
import org.fiware.lab.orion.testing.TestHelper;
import org.fiware.lab.orion.controllers.BatchOperationsController;

import com.fasterxml.jackson.core.type.TypeReference;

public class BatchOperationsControllerTest extends ControllerTestBase {
    
    /**
     * Controller instance (for all tests)
     */
    private static BatchOperationsController controller;
    
    /**
     * Setup test class
     */
    @BeforeClass
    public static void setUpClass() {
        controller = getClient().getBatchOperations();
    }

    /**
     * Tear down test class
     * @throws IOException
     */
    @AfterClass
    public static void tearDownClass() throws IOException {
        controller = null;
    }

    /**
     * This operation allows to create, update and/or delete several entities in a single batch operation.
The payload is an object with two properties:

+ `actionType`, to specify the kind of update action to do: either `append`, `appendStrict`, `update`,
  `delete`, or `replace`.

+ `entities`, an array of entities, each entity specified using the JSON entity representation format
  (described in the section "JSON Entity Representation").

This operation is split in as many individual operations as entities in the `entities` vector, so
the `actionType` is executed for each one of them. Depending on the `actionType`, a mapping with
regular non-batch operations can be done:

* `append`: maps to `POST /v2/entities` (if the entity does not already exist) or `POST /v2/entities/<id>/attrs`
  (if the entity already exists).

* `appendStrict`: maps to `POST /v2/entities` (if the entity does not already exist) or
  `POST /v2/entities/<id>/attrs?options=append` (if the entity already exists).

* `update`: maps to `PATCH /v2/entities/<id>/attrs`.

* `delete`: maps to `DELETE /v2/entities/<id>/attrs/<attrName>` on every attribute included in the entity or
  to `DELETE /v2/entities/<id>` if no attribute were included in the entity.

* `replace`: maps to `PUT /v2/entities/<id>/attrs`.

Response:

* Successful operation uses 204 No Content.

* Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
  more details.
     * @throws Throwable
     */
    @Test
    public void testUpdate1() throws Throwable {
        // Parameters for the API call
        String contentType = "application/json";
        UpdateRequest body = APIHelper.deserialize("{  \"actionType\": \"append\",  \"entities\": [    {      \"type\": \"Room\",      \"id\": \"Bcn-Welt\",      \"temperature\": {        \"value\": 21.7       },      \"humidity\": {        \"value\": 60      }    },    {      \"type\": \"Room\",      \"id\": \"Mad_Aud\",      \"temperature\": {        \"value\": 22.9      },      \"humidity\": {        \"value\": 85      }    }  ]}", new TypeReference<UpdateRequest>(){});
        Options5Enum options = null;

        // Set callback and perform API call
        controller.setHttpCallBack(httpResponse);
        try {
        controller.update(contentType, body, options);
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 204", 
                204, httpResponse.getResponse().getStatusCode());

    }

    /**
     * The response payload is an Array containing one object per matching entity, or an empty array `[]` if 
no entities are found. The entities follow the JSON entity representation format
(described in the section "JSON Entity Representation").

The payload may contain the following elements (all of them optional):

+ `entities`: a list of entites to search for. Each element is represented by a JSON object with the
  following elements:
    + `id` or `idPattern`: Id or pattern of the affected entities. Both cannot be used at the same
      time, but one of them must be present.
    + `type` or `typePattern`: Type or type pattern of the entities to search for. Both cannot be used at
      the same time. If omitted, it means "any entity type".

+ `attrs`: List of attributes to be provided (if not specified, all attributes).

+ `expression`: an expression composed of `q`, `mq`, `georel`, `geometry` and `coords` (see "List
   entities" operation above about this field).

+ `metadata`: a list of metadata names to include in the response.
   See "Filtering out attributes and metadata" section for more detail.

Response code:

* Successful operation uses 200 OK

* Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
  more details.
     * @throws Throwable
     */
    @Test
    public void testQuery1() throws Throwable {
        // Parameters for the API call
        String contentType = "application/json";
        QueryRequest body = APIHelper.deserialize("{  \"entities\": [    {      \"idPattern\": \".*\",      \"type\": \"Room\"    },    {      \"id\": \"Car\",      \"type\": \"P-9873-K\"    }  ],  \"attrs\": [    \"temperature\",    \"humidity\"  ],  \"expression\": {     \"q\": \"temperature>20\"  },  \"metadata\": [    \"accuracy\",    \"timestamp\"  ]}", new TypeReference<QueryRequest>(){});
        Double limit = 10d;
        Double offset = 20d;
        String orderBy = "temperature,!speed";
        OptionsEnum options = null;

        // Set callback and perform API call
        List<QueryResponse> result = null;
        controller.setHttpCallBack(httpResponse);
        try {
            result = controller.createQuery(contentType, body, limit, offset, orderBy, options);
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", TestHelper.nullString);
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", TestHelper.isArrayOfJsonObjectsProperSubsetOf(
                "[  {    \"type\": \"Room\",    \"id\": \"DC_S1-D41\",    \"temperature\": {      \"value\": 35.6,      \"type\": \"Number\"    }  },  {    \"type\": \"Room\",    \"id\": \"Boe-Idearium\",    \"temperature\": {      \"value\": 22.5,      \"type\": \"Number\"    }  },  {    \"type\": \"Car\",    \"id\": \"P-9873-K\",    \"temperature\": {      \"value\": 40,      \"type\": \"Number\",      \"accuracy\": 2,      \"timestamp\": {        \"value\": \"2015-06-04T07:20:27.378Z\",        \"type\": \"DateTime\"      }    }  }]", 
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * This operation is intended to consume a notification payload so that all the entity data included by such notification is persisted, overwriting if necessary.
This operation is useful when one NGSIv2 endpoint is subscribed to another NGSIv2 endpoint (federation scenarios). 
The request payload must be an NGSIv2 notification payload. 
The behaviour must be exactly the same as `POST /v2/op/update` with `actionType` equal to `append`.

Response code:

* Successful operation uses 200 OK

* Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
  more details.
     * @throws Throwable
     */
    @Test
    public void testNotify1() throws Throwable {
        // Parameters for the API call
        String contentType = "application/json";
        NotifyRequest body = APIHelper.deserialize("{  \"subscriptionId\": \"5aeb0ee97d4ef10a12a0262f\",  \"data\": [{    \"type\": \"Room\",    \"id\": \"DC_S1-D41\",    \"temperature\": {      \"value\": 35.6,      \"type\": \"Number\"    }  },  {    \"type\": \"Room\",    \"id\": \"Boe-Idearium\",    \"temperature\": {      \"value\": 22.5,      \"type\": \"Number\"    }  }]}", new TypeReference<NotifyRequest>(){});
        Options5Enum options = null;

        // Set callback and perform API call
        controller.setHttpCallBack(httpResponse);
        try {
        controller.createNotify(contentType, body, options);
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", TestHelper.nullString);
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders(), true));

    }

}
