/*
 * FIWARENGSIV2SpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package org.fiware.lab.orion.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.fiware.lab.orion.ApiHelper;
import org.fiware.lab.orion.FIWARENGSIV2SpecificationClient;
import org.fiware.lab.orion.exceptions.ApiException;
import org.fiware.lab.orion.models.NotifyRequest;
import org.fiware.lab.orion.models.Options5Enum;
import org.fiware.lab.orion.models.UpdateRequest;
import org.fiware.lab.orion.testing.TestHelper;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class BatchOperationsControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static FIWARENGSIV2SpecificationClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static BatchOperationsController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getBatchOperationsController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * This operation allows to create, update and/or delete several entities in a single batch
     * operation. The payload is an object with two properties: + `actionType`, to specify the kind
     * of update action to do: either `append`, `appendStrict`, `update`, `delete`, or `replace`. +
     * `entities`, an array of entities, each entity specified using the JSON entity representation
     * format (described in the section "JSON Entity Representation"). This operation is split in as
     * many individual operations as entities in the `entities` vector, so the `actionType` is
     * executed for each one of them. Depending on the `actionType`, a mapping with regular
     * non-batch operations can be done: * `append`: maps to `POST /v2/entities` (if the entity does
     * not already exist) or `POST /v2/entities/&lt;id&gt;/attrs` (if the entity already exists). *
     * `appendStrict`: maps to `POST /v2/entities` (if the entity does not already exist) or `POST
     * /v2/entities/&lt;id&gt;/attrs?options=append` (if the entity already exists). * `update`: maps to
     * `PATCH /v2/entities/&lt;id&gt;/attrs`. * `delete`: maps to `DELETE
     * /v2/entities/&lt;id&gt;/attrs/&lt;attrName&gt;` on every attribute included in the entity or to `DELETE
     * /v2/entities/&lt;id&gt;` if no attribute were included in the entity. * `replace`: maps to `PUT
     * /v2/entities/&lt;id&gt;/attrs`. Response: * Successful operation uses 204 No Content. * Errors use
     * a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for more
     * details.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testUpdate1() throws Exception {
        // Parameters for the API call
        UpdateRequest body = ApiHelper.deserialize(
                "{  \"actionType\": \"append\",  \"entities\": [    {      \"type\": \"Room\",     "
                + " \"id\": \"Bcn-Welt\",      \"temperature\": {        \"value\": 21.7       },  "
                + "    \"humidity\": {        \"value\": 60      }    },    {      \"type\": \"Room"
                + "\",      \"id\": \"Mad_Aud\",      \"temperature\": {        \"value\": 22.9    "
                + "  },      \"humidity\": {        \"value\": 85      }    }  ]}",
                UpdateRequest.class);
        Options5Enum options = null;

        // Set callback and perform API call
        try {
            controller.update(body, options);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 204", 
                204, httpResponse.getResponse().getStatusCode());

    }

    /**
     * This operation is intended to consume a notification payload so that all the entity data
     * included by such notification is persisted, overwriting if necessary. This operation is
     * useful when one NGSIv2 endpoint is subscribed to another NGSIv2 endpoint (federation
     * scenarios). The request payload must be an NGSIv2 notification payload. The behaviour must be
     * exactly the same as `POST /v2/op/update` with `actionType` equal to `append`. Response code:
     * * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload.
     * See subsection on "Error Responses" for more details.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testNotify1() throws Exception {
        // Parameters for the API call
        NotifyRequest body = ApiHelper.deserialize(
                "{  \"subscriptionId\": \"5aeb0ee97d4ef10a12a0262f\",  \"data\": [{    \"type\": "
                + "\"Room\",    \"id\": \"DC_S1-D41\",    \"temperature\": {      \"value\": 35.6, "
                + "     \"type\": \"Number\"    }  },  {    \"type\": \"Room\",    \"id\": \"Boe-Id"
                + "earium\",    \"temperature\": {      \"value\": 22.5,      \"type\": \"Number\" "
                + "   }  }]}",
                NotifyRequest.class);
        Options5Enum options = null;

        // Set callback and perform API call
        try {
            controller.notify(body, options);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", TestHelper.nullString);
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

    }

}
