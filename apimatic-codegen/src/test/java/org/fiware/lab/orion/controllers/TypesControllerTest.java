/*
 * FIWARENGSIV2SpecificationLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package org.fiware.lab.orion.controllers;

import static org.junit.Assert.*;

import java.io.*;
import java.util.*;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import org.fiware.lab.orion.models.*;
import org.fiware.lab.orion.exceptions.*;
import org.fiware.lab.orion.APIHelper;
import org.fiware.lab.orion.Configuration;
import org.fiware.lab.orion.testing.TestHelper;
import org.fiware.lab.orion.controllers.TypesController;

import com.fasterxml.jackson.core.type.TypeReference;

public class TypesControllerTest extends ControllerTestBase {
    
    /**
     * Controller instance (for all tests)
     */
    private static TypesController controller;
    
    /**
     * Setup test class
     */
    @BeforeClass
    public static void setUpClass() {
        controller = getClient().getTypes();
    }

    /**
     * Tear down test class
     * @throws IOException
     */
    @AfterClass
    public static void tearDownClass() throws IOException {
        controller = null;
    }

    /**
     * If the `values` option is not in use, this operation returns a JSON array with the entity types.
Each element is a JSON object with information about the type:

* `type` : the entity type name.

* `attrs` : the set of attribute names along with all the entities of such type, represented in
  a JSON object whose keys are the attribute names and whose values contain information of such
  attributes (in particular a list of the types used by attributes with that name along with all the
  entities).

* `count` : the number of entities belonging to that type.

If the `values` option is used, the operation returns a JSON array with a list of entity type
names as strings.

Results are ordered by entity `type` in alphabetical order.

Response code:

* Successful operation uses 200 OK

* Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
  more details.
     * @throws Throwable
     */
    @Test
    public void testListEntityTypes1() throws Throwable {
        // Parameters for the API call
        Double limit = 10d;
        Double offset = 20d;
        Options7Enum options = null;

        // Set callback and perform API call
        List<ListEntityTypesResponse> result = null;
        controller.setHttpCallBack(httpResponse);
        try {
            result = controller.listEntityTypes(limit, offset, options);
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", TestHelper.nullString);
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", TestHelper.isArrayOfJsonObjectsProperSubsetOf(
                "[  {    \"type\": \"Car\",    \"attrs\": {      \"speed\": {        \"types\": [ \"Number\" ]      },      \"fuel\": {        \"types\": [ \"gasoline\", \"diesel\" ]      },      \"temperature\": {        \"types\": [ \"urn:phenomenum:temperature\" ]      }    },    \"count\": 12  },  {    \"type\": \"Room\",    \"attrs\": {      \"pressure\": {        \"types\": [ \"Number\" ]      },      \"humidity\": {        \"types\": [ \"percentage\" ]      },      \"temperature\": {        \"types\": [ \"urn:phenomenum:temperature\" ]      }    },    \"count\": 7  }]", 
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * This operation returns a JSON object with information about the type:

* `attrs` : the set of attribute names along with all the entities of such type, represented in
  a JSON object whose keys are the attribute names and whose values contain information of such
  attributes (in particular a list of the types used by attributes with that name along with all the
  entities).

* `count` : the number of entities belonging to that type.

Response code:

* Successful operation uses 200 OK

* Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
  more details.
     * @throws Throwable
     */
    @Test
    public void testRetrieveEntityType1() throws Throwable {
        // Parameters for the API call
        String entityType = "Room";

        // Set callback and perform API call
        RetrieveEntityTypeResponse result = null;
        controller.setHttpCallBack(httpResponse);
        try {
            result = controller.retrieveEntityType(entityType);
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", TestHelper.nullString);
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", TestHelper.isJsonObjectProperSubsetOf(
                "  {    \"attrs\": {      \"pressure\": {        \"types\": [ \"Number\" ]      },      \"humidity\": {        \"types\": [ \"percentage\" ]      },      \"temperature\": {        \"types\": [ \"urn:phenomenum:temperature\" ]      }    },    \"count\": 7  }", 
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

}
