/*
 * FIWARENGSIV2SpecificationLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package org.fiware.lab.orion.controllers;

import static org.junit.Assert.*;

import java.io.*;
import java.util.*;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import org.fiware.lab.orion.models.*;
import org.fiware.lab.orion.exceptions.*;
import org.fiware.lab.orion.APIHelper;
import org.fiware.lab.orion.Configuration;
import org.fiware.lab.orion.testing.TestHelper;
import org.fiware.lab.orion.controllers.EntitiesController;

import com.fasterxml.jackson.core.type.TypeReference;

public class EntitiesControllerTest extends ControllerTestBase {
    
    /**
     * Controller instance (for all tests)
     */
    private static EntitiesController controller;
    
    /**
     * Setup test class
     */
    @BeforeClass
    public static void setUpClass() {
        controller = getClient().getEntities();
    }

    /**
     * Tear down test class
     * @throws IOException
     */
    @AfterClass
    public static void tearDownClass() throws IOException {
        controller = null;
    }

    /**
     * Retrieves a list of entities that match different criteria by id, type, pattern matching (either id or type)
and/or those which match a query or geographical query (see [Simple Query Language](#simple_query_language) and 
[Geographical Queries](#geographical_queries)). A given entity has to match all the criteria to be retrieved
(i.e., the criteria is combined in a logical AND way). Note that pattern matching query parameters are incompatible
(i.e. mutually exclusive) with their corresponding exact matching parameters, i.e. `idPattern` with `id` and
`typePattern` with `type`.

The response payload is an array containing one object per matching entity. Each entity follows
the JSON entity representation format (described in "JSON Entity Representation" section).

Response code:

* Successful operation uses 200 OK

* Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
  more details.
     * @throws Throwable
     */
    @Test
    public void testListEntities1() throws Throwable {
        // Parameters for the API call
        String id = "Boe_Idearium";
        String type = "Room";
        String idPattern = "Bode_.*";
        String typePattern = "Room_.*";
        String q = "temperature>40";
        String mq = "temperature.accuracy<0.9";
        String georel = "near";
        String geometry = "point";
        String coords = "41.390205,2.154007;48.8566,2.3522";
        Double limit = 20d;
        Double offset = 20d;
        String attrs = "seatNumber";
        String metadata = "accuracy";
        String orderBy = "temperature,!speed";
        OptionsEnum options = null;

        // Set callback and perform API call
        List<ListEntitiesResponse> result = null;
        controller.setHttpCallBack(httpResponse);
        try {
            result = controller.listEntities(id, type, idPattern, typePattern, q, mq, georel, geometry, coords, limit, offset, attrs, metadata, orderBy, options);
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", TestHelper.nullString);
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", TestHelper.isArrayOfJsonObjectsProperSubsetOf(
                "[ {   \"type\": \"Room\",   \"id\": \"DC_S1-D41\",   \"temperature\": {     \"value\": 35.6,     \"type\": \"Number\",     \"metadata\": {}   } }, {   \"type\": \"Room\",   \"id\": \"Boe-Idearium\",   \"temperature\": {     \"value\": 22.5,     \"type\": \"Number\",     \"metadata\": {}   } }, {   \"type\": \"Car\",   \"id\": \"P-9873-K\",   \"speed\": {     \"value\": 100,     \"type\": \"number\",     \"metadata\": {       \"accuracy\": {         \"value\": 2,         \"type\": \"Number\"       },       \"timestamp\": {         \"value\": \"2015-06-04T07:20:27.378Z\",         \"type\": \"DateTime\"       }     }   } }]", 
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * The payload is an object representing the entity to be created. The object follows
the JSON entity representation format (described in a "JSON Entity Representation" section).

Response:

* Successful operation uses 201 Created (if upsert option is not used) or 204 No Content (if
  upsert option is used). Response includes a `Location` header with the URL of the
  created entity.

* Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
  more details.
     * @throws Throwable
     */
    @Test
    public void testCreateEntity1() throws Throwable {
        // Parameters for the API call
        String contentType = "application/json";
        CreateEntityRequest body = APIHelper.deserialize("{  \"type\": \"Room\",  \"id\": \"Bcn-Welt\",  \"temperature\": {    \"value\": 21.7  },  \"humidity\": {    \"value\": 60  },  \"location\": {    \"value\": \"41.3763726, 2.1864475\",    \"type\": \"geo:point\",    \"metadata\": {      \"crs\": {        \"value\": \"WGS84\"      }    }  }}", new TypeReference<CreateEntityRequest>(){});
        Options1Enum options = null;

        // Set callback and perform API call
        controller.setHttpCallBack(httpResponse);
        try {
        controller.createEntity(contentType, body, options);
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 201", 
                201, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Location", TestHelper.nullString);
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders(), true));

    }

}
