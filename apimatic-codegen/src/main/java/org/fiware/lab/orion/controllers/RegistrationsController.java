/*
 * FIWARENGSIV2SpecificationLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package org.fiware.lab.orion.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;

import org.fiware.lab.orion.*;
import org.fiware.lab.orion.models.*;
import org.fiware.lab.orion.exceptions.*;
import org.fiware.lab.orion.http.client.HttpClient;
import org.fiware.lab.orion.http.client.HttpContext;
import org.fiware.lab.orion.http.request.HttpRequest;
import org.fiware.lab.orion.http.response.HttpResponse;
import org.fiware.lab.orion.http.response.HttpStringResponse;
import org.fiware.lab.orion.http.client.APICallBack;
import org.fiware.lab.orion.controllers.syncwrapper.APICallBackCatcher;

public class RegistrationsController extends BaseController {
    //private static variables for the singleton pattern
    private static final Object syncObject = new Object();
    private static RegistrationsController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the RegistrationsController class 
     */
    public static RegistrationsController getInstance() {
        if (null == instance) {
            synchronized (syncObject) {
                if (null == instance) {
                    instance = new RegistrationsController();
                }
            }
        }
        return instance;
    }

    /**
     * Lists all the context provider registrations present in the system.
     * @param    limit    Optional parameter: Limit the number of registrations to be retrieved
     * @param    offset    Optional parameter: Skip a number of registrations
     * @param    options    Optional parameter: Options dictionary
     * @return    Returns the List<ListRegistrationsResponse> response from the API call 
     */
    public List<ListRegistrationsResponse> listRegistrations(
                final Double limit,
                final Double offset,
                final Options8Enum options
    ) throws Throwable {

        HttpRequest _request = _buildListRegistrationsRequest(limit, offset, options);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleListRegistrationsResponse(_context);
    }

    /**
     * Lists all the context provider registrations present in the system.
     * @param    limit    Optional parameter: Limit the number of registrations to be retrieved
     * @param    offset    Optional parameter: Skip a number of registrations
     * @param    options    Optional parameter: Options dictionary
     */
    public void listRegistrationsAsync(
                final Double limit,
                final Double offset,
                final Options8Enum options,
                final APICallBack<List<ListRegistrationsResponse>> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildListRegistrationsRequest(limit, offset, options);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            List<ListRegistrationsResponse> returnValue = _handleListRegistrationsResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for listRegistrations
     */
    private HttpRequest _buildListRegistrationsRequest(
                final Double limit,
                final Double offset,
                final Options8Enum options) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/v2/registrations");

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        if (limit != null) {
            _queryParameters.put("limit", limit);
        }
        if (offset != null) {
            _queryParameters.put("offset", offset);
        }
        if (options != null) {
            _queryParameters.put("options", (options != null) ? options.value() : null);
        }
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for listRegistrations
     * @return An object of type List<ListRegistrationsResponse>
     */
    private List<ListRegistrationsResponse> _handleListRegistrationsResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        List<ListRegistrationsResponse> _result = APIHelper.deserialize(_responseBody,
									new TypeReference<List<ListRegistrationsResponse>>(){});

        return _result;
    }

    /**
     * Creates a new context provider registration. This is typically used for binding context sources
     * as providers of certain data.
     * The registration is represented by a JSON object as described at the beginning of this section.
     * Response:
     * * Successful operation uses 201 Created
     * * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
     *   more details.
     * @param    contentType    Required parameter: Example: 
     * @param    body    Required parameter: Example: 
     */
    public void createRegistration(
                final String contentType,
                final CreateRegistrationRequest body
    ) throws Throwable {

        HttpRequest _request = _buildCreateRegistrationRequest(contentType, body);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        _handleCreateRegistrationResponse(_context);
    }

    /**
     * Creates a new context provider registration. This is typically used for binding context sources
     * as providers of certain data.
     * The registration is represented by a JSON object as described at the beginning of this section.
     * Response:
     * * Successful operation uses 201 Created
     * * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
     *   more details.
     * @param    contentType    Required parameter: Example: 
     * @param    body    Required parameter: Example: 
     */
    public void createRegistrationAsync(
                final String contentType,
                final CreateRegistrationRequest body,
                final APICallBack<Object> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateRegistrationRequest(contentType, body);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            _handleCreateRegistrationResponse(_context);
                            callBack.onSuccess(_context, null);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createRegistration
     */
    private HttpRequest _buildCreateRegistrationRequest(
                final String contentType,
                final CreateRegistrationRequest body) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/v2/registrations");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("Content-Type", contentType);
        _headers.put("user-agent", BaseController.userAgent);


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createRegistration
     */
    private void _handleCreateRegistrationResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);


    }

    /**
     * The response is the registration represented by a JSON object as described at the beginning of this
     * section.
     * Response:
     * * Successful operation uses 200 OK
     * * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
     *   more details.
     * @param    registrationId    Required parameter: registration Id.
     * @return    Returns the RetrieveRegistrationResponse response from the API call 
     */
    public RetrieveRegistrationResponse retrieveRegistration(
                final String registrationId
    ) throws Throwable {

        HttpRequest _request = _buildRetrieveRegistrationRequest(registrationId);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleRetrieveRegistrationResponse(_context);
    }

    /**
     * The response is the registration represented by a JSON object as described at the beginning of this
     * section.
     * Response:
     * * Successful operation uses 200 OK
     * * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
     *   more details.
     * @param    registrationId    Required parameter: registration Id.
     */
    public void retrieveRegistrationAsync(
                final String registrationId,
                final APICallBack<RetrieveRegistrationResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildRetrieveRegistrationRequest(registrationId);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            RetrieveRegistrationResponse returnValue = _handleRetrieveRegistrationResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for retrieveRegistration
     */
    private HttpRequest _buildRetrieveRegistrationRequest(
                final String registrationId) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/v2/registrations/{registrationId}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("registrationId", registrationId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for retrieveRegistration
     * @return An object of type RetrieveRegistrationResponse
     */
    private RetrieveRegistrationResponse _handleRetrieveRegistrationResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        RetrieveRegistrationResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<RetrieveRegistrationResponse>(){});

        return _result;
    }

    /**
     * Only the fields included in the request are updated in the registration.
     * Response:
     * * Successful operation uses 204 No Content
     * * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
     *   more details.
     * @param    registrationId    Required parameter: registration Id.
     * @param    contentType    Required parameter: Example: 
     * @param    body    Required parameter: Example: 
     */
    public void updateRegistration(
                final String registrationId,
                final String contentType,
                final UpdateRegistrationRequest body
    ) throws Throwable {

        HttpRequest _request = _buildUpdateRegistrationRequest(registrationId, contentType, body);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        _handleUpdateRegistrationResponse(_context);
    }

    /**
     * Only the fields included in the request are updated in the registration.
     * Response:
     * * Successful operation uses 204 No Content
     * * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
     *   more details.
     * @param    registrationId    Required parameter: registration Id.
     * @param    contentType    Required parameter: Example: 
     * @param    body    Required parameter: Example: 
     */
    public void updateRegistrationAsync(
                final String registrationId,
                final String contentType,
                final UpdateRegistrationRequest body,
                final APICallBack<Object> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildUpdateRegistrationRequest(registrationId, contentType, body);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            _handleUpdateRegistrationResponse(_context);
                            callBack.onSuccess(_context, null);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for updateRegistration
     */
    private HttpRequest _buildUpdateRegistrationRequest(
                final String registrationId,
                final String contentType,
                final UpdateRegistrationRequest body) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/v2/registrations/{registrationId}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("registrationId", registrationId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("Content-Type", contentType);
        _headers.put("user-agent", BaseController.userAgent);


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().patchBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for updateRegistration
     */
    private void _handleUpdateRegistrationResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);


    }

    /**
     * Cancels a context provider registration.
     * Response:
     * * Successful operation uses 204 No Content
     * * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
     *   more details.
     * @param    registrationId    Required parameter: registration Id.
     */
    public void deleteRegistration(
                final String registrationId
    ) throws Throwable {

        HttpRequest _request = _buildDeleteRegistrationRequest(registrationId);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        _handleDeleteRegistrationResponse(_context);
    }

    /**
     * Cancels a context provider registration.
     * Response:
     * * Successful operation uses 204 No Content
     * * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
     *   more details.
     * @param    registrationId    Required parameter: registration Id.
     */
    public void deleteRegistrationAsync(
                final String registrationId,
                final APICallBack<Object> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildDeleteRegistrationRequest(registrationId);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            _handleDeleteRegistrationResponse(_context);
                            callBack.onSuccess(_context, null);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for deleteRegistration
     */
    private HttpRequest _buildDeleteRegistrationRequest(
                final String registrationId) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/v2/registrations/{registrationId}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("registrationId", registrationId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().delete(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for deleteRegistration
     */
    private void _handleDeleteRegistrationResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);


    }

}
