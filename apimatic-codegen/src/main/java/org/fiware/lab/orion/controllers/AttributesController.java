/*
 * FIWARENGSIV2SpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package org.fiware.lab.orion.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import org.fiware.lab.orion.ApiHelper;
import org.fiware.lab.orion.AuthManager;
import org.fiware.lab.orion.Configuration;
import org.fiware.lab.orion.exceptions.ApiException;
import org.fiware.lab.orion.http.Headers;
import org.fiware.lab.orion.http.client.HttpCallback;
import org.fiware.lab.orion.http.client.HttpClient;
import org.fiware.lab.orion.http.client.HttpContext;
import org.fiware.lab.orion.http.request.HttpRequest;
import org.fiware.lab.orion.http.response.HttpResponse;
import org.fiware.lab.orion.http.response.HttpStringResponse;
import org.fiware.lab.orion.models.GetAttributeDataResponse;
import org.fiware.lab.orion.models.UpdateAttributeDataRequest;

/**
 * This class lists all the endpoints of the groups.
 */
public final class AttributesController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public AttributesController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public AttributesController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * Returns a JSON object with the attribute data of the attribute. The object follows the JSON
     * representation for attributes (described in "JSON Attribute Representation" section).
     * Response: * Successful operation uses 200 OK. * Errors use a non-2xx and (optionally) an
     * error payload. See subsection on "Error Responses" for more details.
     * @param  entityId  Required parameter: Id of the entity
     * @param  attrName  Required parameter: Name of the attribute to be retrieved.
     * @param  type  Optional parameter: Entity type, to avoid ambiguity in case there are several
     *         entities with the same entity id.
     * @param  metadata  Optional parameter: A list of metadata names to include in the response.
     *         See "Filtering out attributes and metadata" section for more detail.
     * @return    Returns the GetAttributeDataResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetAttributeDataResponse getAttributeData(
            final String entityId,
            final String attrName,
            final String type,
            final String metadata) throws ApiException, IOException {
        HttpRequest request = buildGetAttributeDataRequest(entityId, attrName, type, metadata);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAttributeDataResponse(context);
    }

    /**
     * Returns a JSON object with the attribute data of the attribute. The object follows the JSON
     * representation for attributes (described in "JSON Attribute Representation" section).
     * Response: * Successful operation uses 200 OK. * Errors use a non-2xx and (optionally) an
     * error payload. See subsection on "Error Responses" for more details.
     * @param  entityId  Required parameter: Id of the entity
     * @param  attrName  Required parameter: Name of the attribute to be retrieved.
     * @param  type  Optional parameter: Entity type, to avoid ambiguity in case there are several
     *         entities with the same entity id.
     * @param  metadata  Optional parameter: A list of metadata names to include in the response.
     *         See "Filtering out attributes and metadata" section for more detail.
     * @return    Returns the GetAttributeDataResponse response from the API call
     */
    public CompletableFuture<GetAttributeDataResponse> getAttributeDataAsync(
            final String entityId,
            final String attrName,
            final String type,
            final String metadata) {
        return makeHttpCallAsync(() -> buildGetAttributeDataRequest(entityId, attrName, type,
                metadata),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAttributeDataResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAttributeData.
     */
    private HttpRequest buildGetAttributeDataRequest(
            final String entityId,
            final String attrName,
            final String type,
            final String metadata) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v2/entities/{entityId}/attrs/{attrName}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("entityId",
                new SimpleEntry<Object, Boolean>(entityId, true));
        templateParameters.put("attrName",
                new SimpleEntry<Object, Boolean>(attrName, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("type", type);
        queryParameters.put("metadata", metadata);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAttributeData.
     * @return An object of type GetAttributeDataResponse
     */
    private GetAttributeDataResponse handleGetAttributeDataResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetAttributeDataResponse result = ApiHelper.deserialize(responseBody,
                GetAttributeDataResponse.class);

        return result;
    }

    /**
     * The request payload is an object representing the new attribute data. Previous attribute data
     * is replaced by the one in the request. The object follows the JSON representation for
     * attributes (described in "JSON Attribute Representation" section). Response: * Successful
     * operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See
     * subsection on "Error Responses" for more details.
     * @param  entityId  Required parameter: Id of the entity to update
     * @param  attrName  Required parameter: Attribute name
     * @param  body  Required parameter: Example:
     * @param  type  Optional parameter: Entity type, to avoid ambiguity in case there are several
     *         entities with the same entity id.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void updateAttributeData(
            final String entityId,
            final String attrName,
            final UpdateAttributeDataRequest body,
            final String type) throws ApiException, IOException {
        HttpRequest request = buildUpdateAttributeDataRequest(entityId, attrName, body, type);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        handleUpdateAttributeDataResponse(context);
    }

    /**
     * The request payload is an object representing the new attribute data. Previous attribute data
     * is replaced by the one in the request. The object follows the JSON representation for
     * attributes (described in "JSON Attribute Representation" section). Response: * Successful
     * operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See
     * subsection on "Error Responses" for more details.
     * @param  entityId  Required parameter: Id of the entity to update
     * @param  attrName  Required parameter: Attribute name
     * @param  body  Required parameter: Example:
     * @param  type  Optional parameter: Entity type, to avoid ambiguity in case there are several
     *         entities with the same entity id.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> updateAttributeDataAsync(
            final String entityId,
            final String attrName,
            final UpdateAttributeDataRequest body,
            final String type) {
        return makeHttpCallAsync(() -> buildUpdateAttributeDataRequest(entityId, attrName, body,
                type),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleUpdateAttributeDataResponse(context));
    }

    /**
     * Builds the HttpRequest object for updateAttributeData.
     */
    private HttpRequest buildUpdateAttributeDataRequest(
            final String entityId,
            final String attrName,
            final UpdateAttributeDataRequest body,
            final String type) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v2/entities/{entityId}/attrs/{attrName}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("entityId",
                new SimpleEntry<Object, Boolean>(entityId, true));
        templateParameters.put("attrName",
                new SimpleEntry<Object, Boolean>(attrName, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("type", type);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().putBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for updateAttributeData.
     * @return An object of type void
     */
    private Void handleUpdateAttributeDataResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        return null;
    }

    /**
     * Removes an entity attribute. Response: * Successful operation uses 204 No Content * Errors
     * use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for more
     * details.
     * @param  entityId  Required parameter: Id of the entity.
     * @param  attrName  Required parameter: Attribute name.
     * @param  type  Optional parameter: Entity type, to avoid ambiguity in case there are several
     *         entities with the same entity id.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void removeASingleAttribute(
            final String entityId,
            final String attrName,
            final String type) throws ApiException, IOException {
        HttpRequest request = buildRemoveASingleAttributeRequest(entityId, attrName, type);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        handleRemoveASingleAttributeResponse(context);
    }

    /**
     * Removes an entity attribute. Response: * Successful operation uses 204 No Content * Errors
     * use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for more
     * details.
     * @param  entityId  Required parameter: Id of the entity.
     * @param  attrName  Required parameter: Attribute name.
     * @param  type  Optional parameter: Entity type, to avoid ambiguity in case there are several
     *         entities with the same entity id.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> removeASingleAttributeAsync(
            final String entityId,
            final String attrName,
            final String type) {
        return makeHttpCallAsync(() -> buildRemoveASingleAttributeRequest(entityId, attrName, type),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleRemoveASingleAttributeResponse(context));
    }

    /**
     * Builds the HttpRequest object for removeASingleAttribute.
     */
    private HttpRequest buildRemoveASingleAttributeRequest(
            final String entityId,
            final String attrName,
            final String type) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v2/entities/{entityId}/attrs/{attrName}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("entityId",
                new SimpleEntry<Object, Boolean>(entityId, true));
        templateParameters.put("attrName",
                new SimpleEntry<Object, Boolean>(attrName, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("type", type);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().delete(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for removeASingleAttribute.
     * @return An object of type void
     */
    private Void handleRemoveASingleAttributeResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        return null;
    }

}