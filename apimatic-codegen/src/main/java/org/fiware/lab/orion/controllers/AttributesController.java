/*
 * FIWARENGSIV2SpecificationLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package org.fiware.lab.orion.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;

import org.fiware.lab.orion.*;
import org.fiware.lab.orion.models.*;
import org.fiware.lab.orion.exceptions.*;
import org.fiware.lab.orion.http.client.HttpClient;
import org.fiware.lab.orion.http.client.HttpContext;
import org.fiware.lab.orion.http.request.HttpRequest;
import org.fiware.lab.orion.http.response.HttpResponse;
import org.fiware.lab.orion.http.response.HttpStringResponse;
import org.fiware.lab.orion.http.client.APICallBack;
import org.fiware.lab.orion.controllers.syncwrapper.APICallBackCatcher;

public class AttributesController extends BaseController {
    //private static variables for the singleton pattern
    private static final Object syncObject = new Object();
    private static AttributesController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the AttributesController class 
     */
    public static AttributesController getInstance() {
        if (null == instance) {
            synchronized (syncObject) {
                if (null == instance) {
                    instance = new AttributesController();
                }
            }
        }
        return instance;
    }

    /**
     * Returns a JSON object with the attribute data of the attribute. The object follows the JSON
     * representation for attributes (described in "JSON Attribute Representation" section).
     * Response:
     * * Successful operation uses 200 OK.
     * * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
     *   more details.
     * @param    entityId    Required parameter: Id of the entity
     * @param    attrName    Required parameter: Name of the attribute to be retrieved.
     * @param    type    Optional parameter: Entity type, to avoid ambiguity in case there are several entities with the same entity id.
     * @param    metadata    Optional parameter: A list of metadata names to include in the response. See "Filtering out attributes and metadata" section for more detail.
     * @return    Returns the GetAttributeDataResponse response from the API call 
     */
    public GetAttributeDataResponse getAttributeData(
                final String entityId,
                final String attrName,
                final String type,
                final String metadata
    ) throws Throwable {

        HttpRequest _request = _buildGetAttributeDataRequest(entityId, attrName, type, metadata);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetAttributeDataResponse(_context);
    }

    /**
     * Returns a JSON object with the attribute data of the attribute. The object follows the JSON
     * representation for attributes (described in "JSON Attribute Representation" section).
     * Response:
     * * Successful operation uses 200 OK.
     * * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
     *   more details.
     * @param    entityId    Required parameter: Id of the entity
     * @param    attrName    Required parameter: Name of the attribute to be retrieved.
     * @param    type    Optional parameter: Entity type, to avoid ambiguity in case there are several entities with the same entity id.
     * @param    metadata    Optional parameter: A list of metadata names to include in the response. See "Filtering out attributes and metadata" section for more detail.
     */
    public void getAttributeDataAsync(
                final String entityId,
                final String attrName,
                final String type,
                final String metadata,
                final APICallBack<GetAttributeDataResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetAttributeDataRequest(entityId, attrName, type, metadata);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetAttributeDataResponse returnValue = _handleGetAttributeDataResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getAttributeData
     */
    private HttpRequest _buildGetAttributeDataRequest(
                final String entityId,
                final String attrName,
                final String type,
                final String metadata) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/v2/entities/{entityId}/attrs/{attrName}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("entityId", entityId);
        _templateParameters.put("attrName", attrName);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        if (type != null) {
            _queryParameters.put("type", type);
        }
        if (metadata != null) {
            _queryParameters.put("metadata", metadata);
        }
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getAttributeData
     * @return An object of type GetAttributeDataResponse
     */
    private GetAttributeDataResponse _handleGetAttributeDataResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetAttributeDataResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetAttributeDataResponse>(){});

        return _result;
    }

    /**
     * The request payload is an object representing the new attribute data. Previous attribute data
     * is replaced by the one in the request. The object follows the JSON representation for attributes
     * (described in "JSON Attribute Representation" section).
     * Response:
     * * Successful operation uses 204 No Content
     * * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
     *   more details.
     * @param    entityId    Required parameter: Id of the entity to update
     * @param    attrName    Required parameter: Attribute name
     * @param    contentType    Required parameter: Example: 
     * @param    body    Required parameter: Example: 
     * @param    type    Optional parameter: Entity type, to avoid ambiguity in case there are several entities with the same entity id.
     */
    public void updateAttributeData(
                final String entityId,
                final String attrName,
                final String contentType,
                final UpdateAttributeDataRequest body,
                final String type
    ) throws Throwable {

        HttpRequest _request = _buildUpdateAttributeDataRequest(entityId, attrName, contentType, body, type);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        _handleUpdateAttributeDataResponse(_context);
    }

    /**
     * The request payload is an object representing the new attribute data. Previous attribute data
     * is replaced by the one in the request. The object follows the JSON representation for attributes
     * (described in "JSON Attribute Representation" section).
     * Response:
     * * Successful operation uses 204 No Content
     * * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
     *   more details.
     * @param    entityId    Required parameter: Id of the entity to update
     * @param    attrName    Required parameter: Attribute name
     * @param    contentType    Required parameter: Example: 
     * @param    body    Required parameter: Example: 
     * @param    type    Optional parameter: Entity type, to avoid ambiguity in case there are several entities with the same entity id.
     */
    public void updateAttributeDataAsync(
                final String entityId,
                final String attrName,
                final String contentType,
                final UpdateAttributeDataRequest body,
                final String type,
                final APICallBack<Object> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildUpdateAttributeDataRequest(entityId, attrName, contentType, body, type);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            _handleUpdateAttributeDataResponse(_context);
                            callBack.onSuccess(_context, null);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for updateAttributeData
     */
    private HttpRequest _buildUpdateAttributeDataRequest(
                final String entityId,
                final String attrName,
                final String contentType,
                final UpdateAttributeDataRequest body,
                final String type) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/v2/entities/{entityId}/attrs/{attrName}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("entityId", entityId);
        _templateParameters.put("attrName", attrName);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        if (type != null) {
            _queryParameters.put("type", type);
        }
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("Content-Type", contentType);
        _headers.put("user-agent", BaseController.userAgent);


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().putBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for updateAttributeData
     */
    private void _handleUpdateAttributeDataResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);


    }

    /**
     * Removes an entity attribute.
     * Response:
     * * Successful operation uses 204 No Content
     * * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
     *   more details.
     * @param    entityId    Required parameter: Id of the entity.
     * @param    attrName    Required parameter: Attribute name.
     * @param    type    Optional parameter: Entity type, to avoid ambiguity in case there are several entities with the same entity id.
     */
    public void removeASingleAttribute(
                final String entityId,
                final String attrName,
                final String type
    ) throws Throwable {

        HttpRequest _request = _buildRemoveASingleAttributeRequest(entityId, attrName, type);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        _handleRemoveASingleAttributeResponse(_context);
    }

    /**
     * Removes an entity attribute.
     * Response:
     * * Successful operation uses 204 No Content
     * * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
     *   more details.
     * @param    entityId    Required parameter: Id of the entity.
     * @param    attrName    Required parameter: Attribute name.
     * @param    type    Optional parameter: Entity type, to avoid ambiguity in case there are several entities with the same entity id.
     */
    public void removeASingleAttributeAsync(
                final String entityId,
                final String attrName,
                final String type,
                final APICallBack<Object> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildRemoveASingleAttributeRequest(entityId, attrName, type);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            _handleRemoveASingleAttributeResponse(_context);
                            callBack.onSuccess(_context, null);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for removeASingleAttribute
     */
    private HttpRequest _buildRemoveASingleAttributeRequest(
                final String entityId,
                final String attrName,
                final String type) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/v2/entities/{entityId}/attrs/{attrName}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("entityId", entityId);
        _templateParameters.put("attrName", attrName);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        if (type != null) {
            _queryParameters.put("type", type);
        }
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().delete(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for removeASingleAttribute
     */
    private void _handleRemoveASingleAttributeResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);


    }

}
