/*
 * FIWARENGSIV2SpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package org.fiware.lab.orion.controllers;

import java.io.IOException;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import org.fiware.lab.orion.ApiHelper;
import org.fiware.lab.orion.AuthManager;
import org.fiware.lab.orion.Configuration;
import org.fiware.lab.orion.exceptions.ApiException;
import org.fiware.lab.orion.http.Headers;
import org.fiware.lab.orion.http.client.HttpCallback;
import org.fiware.lab.orion.http.client.HttpClient;
import org.fiware.lab.orion.http.client.HttpContext;
import org.fiware.lab.orion.http.request.HttpRequest;
import org.fiware.lab.orion.http.response.HttpResponse;
import org.fiware.lab.orion.http.response.HttpStringResponse;
import org.fiware.lab.orion.models.ListEntityTypesResponse;
import org.fiware.lab.orion.models.Options7Enum;
import org.fiware.lab.orion.models.RetrieveEntityTypeResponse;

/**
 * This class lists all the endpoints of the groups.
 */
public final class TypesController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public TypesController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public TypesController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * If the `values` option is not in use, this operation returns a JSON array with the entity
     * types. Each element is a JSON object with information about the type: * `type` : the entity
     * type name. * `attrs` : the set of attribute names along with all the entities of such type,
     * represented in a JSON object whose keys are the attribute names and whose values contain
     * information of such attributes (in particular a list of the types used by attributes with
     * that name along with all the entities). * `count` : the number of entities belonging to that
     * type. If the `values` option is used, the operation returns a JSON array with a list of
     * entity type names as strings. Results are ordered by entity `type` in alphabetical order.
     * Response code: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an
     * error payload. See subsection on "Error Responses" for more details.
     * @param  limit  Optional parameter: Limit the number of types to be retrieved.
     * @param  offset  Optional parameter: Skip a number of records.
     * @param  options  Optional parameter: Options dictionary.
     * @return    Returns the List of ListEntityTypesResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<ListEntityTypesResponse> listEntityTypes(
            final Double limit,
            final Double offset,
            final Options7Enum options) throws ApiException, IOException {
        HttpRequest request = buildListEntityTypesRequest(limit, offset, options);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleListEntityTypesResponse(context);
    }

    /**
     * If the `values` option is not in use, this operation returns a JSON array with the entity
     * types. Each element is a JSON object with information about the type: * `type` : the entity
     * type name. * `attrs` : the set of attribute names along with all the entities of such type,
     * represented in a JSON object whose keys are the attribute names and whose values contain
     * information of such attributes (in particular a list of the types used by attributes with
     * that name along with all the entities). * `count` : the number of entities belonging to that
     * type. If the `values` option is used, the operation returns a JSON array with a list of
     * entity type names as strings. Results are ordered by entity `type` in alphabetical order.
     * Response code: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an
     * error payload. See subsection on "Error Responses" for more details.
     * @param  limit  Optional parameter: Limit the number of types to be retrieved.
     * @param  offset  Optional parameter: Skip a number of records.
     * @param  options  Optional parameter: Options dictionary.
     * @return    Returns the List of ListEntityTypesResponse response from the API call
     */
    public CompletableFuture<List<ListEntityTypesResponse>> listEntityTypesAsync(
            final Double limit,
            final Double offset,
            final Options7Enum options) {
        return makeHttpCallAsync(() -> buildListEntityTypesRequest(limit, offset, options),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleListEntityTypesResponse(context));
    }

    /**
     * Builds the HttpRequest object for listEntityTypes.
     */
    private HttpRequest buildListEntityTypesRequest(
            final Double limit,
            final Double offset,
            final Options7Enum options) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v2/types/");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("limit", limit);
        queryParameters.put("offset", offset);
        queryParameters.put("options",
                (options != null) ? options.value() : null);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for listEntityTypes.
     * @return An object of type List of ListEntityTypesResponse
     */
    private List<ListEntityTypesResponse> handleListEntityTypesResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        List<ListEntityTypesResponse> result = ApiHelper.deserializeArray(responseBody,
                ListEntityTypesResponse[].class);
        return result;
    }

    /**
     * This operation returns a JSON object with information about the type: * `attrs` : the set of
     * attribute names along with all the entities of such type, represented in a JSON object whose
     * keys are the attribute names and whose values contain information of such attributes (in
     * particular a list of the types used by attributes with that name along with all the
     * entities). * `count` : the number of entities belonging to that type. Response code: *
     * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload.
     * See subsection on "Error Responses" for more details.
     * @param  entityType  Required parameter: Entity Type
     * @return    Returns the RetrieveEntityTypeResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public RetrieveEntityTypeResponse retrieveEntityType(
            final String entityType) throws ApiException, IOException {
        HttpRequest request = buildRetrieveEntityTypeRequest(entityType);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleRetrieveEntityTypeResponse(context);
    }

    /**
     * This operation returns a JSON object with information about the type: * `attrs` : the set of
     * attribute names along with all the entities of such type, represented in a JSON object whose
     * keys are the attribute names and whose values contain information of such attributes (in
     * particular a list of the types used by attributes with that name along with all the
     * entities). * `count` : the number of entities belonging to that type. Response code: *
     * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload.
     * See subsection on "Error Responses" for more details.
     * @param  entityType  Required parameter: Entity Type
     * @return    Returns the RetrieveEntityTypeResponse response from the API call
     */
    public CompletableFuture<RetrieveEntityTypeResponse> retrieveEntityTypeAsync(
            final String entityType) {
        return makeHttpCallAsync(() -> buildRetrieveEntityTypeRequest(entityType),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleRetrieveEntityTypeResponse(context));
    }

    /**
     * Builds the HttpRequest object for retrieveEntityType.
     */
    private HttpRequest buildRetrieveEntityTypeRequest(
            final String entityType) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v2/types/{entityType}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("entityType",
                new SimpleEntry<Object, Boolean>(entityType, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for retrieveEntityType.
     * @return An object of type RetrieveEntityTypeResponse
     */
    private RetrieveEntityTypeResponse handleRetrieveEntityTypeResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        RetrieveEntityTypeResponse result = ApiHelper.deserialize(responseBody,
                RetrieveEntityTypeResponse.class);

        return result;
    }

}