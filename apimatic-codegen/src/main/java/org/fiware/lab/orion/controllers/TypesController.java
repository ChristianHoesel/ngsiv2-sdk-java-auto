/*
 * FIWARENGSIV2SpecificationLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package org.fiware.lab.orion.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.type.TypeReference;

import org.fiware.lab.orion.*;
import org.fiware.lab.orion.models.*;
import org.fiware.lab.orion.exceptions.*;
import org.fiware.lab.orion.http.client.HttpClient;
import org.fiware.lab.orion.http.client.HttpContext;
import org.fiware.lab.orion.http.request.HttpRequest;
import org.fiware.lab.orion.http.response.HttpResponse;
import org.fiware.lab.orion.http.response.HttpStringResponse;
import org.fiware.lab.orion.http.client.APICallBack;
import org.fiware.lab.orion.controllers.syncwrapper.APICallBackCatcher;

public class TypesController extends BaseController {
    //private static variables for the singleton pattern
    private static final Object syncObject = new Object();
    private static TypesController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the TypesController class 
     */
    public static TypesController getInstance() {
        if (null == instance) {
            synchronized (syncObject) {
                if (null == instance) {
                    instance = new TypesController();
                }
            }
        }
        return instance;
    }

    /**
     * If the `values` option is not in use, this operation returns a JSON array with the entity types.
     * Each element is a JSON object with information about the type:
     * * `type` : the entity type name.
     * * `attrs` : the set of attribute names along with all the entities of such type, represented in
     *   a JSON object whose keys are the attribute names and whose values contain information of such
     *   attributes (in particular a list of the types used by attributes with that name along with all the
     *   entities).
     * * `count` : the number of entities belonging to that type.
     * If the `values` option is used, the operation returns a JSON array with a list of entity type
     * names as strings.
     * Results are ordered by entity `type` in alphabetical order.
     * Response code:
     * * Successful operation uses 200 OK
     * * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
     *   more details.
     * @param    limit    Optional parameter: Limit the number of types to be retrieved.
     * @param    offset    Optional parameter: Skip a number of records.
     * @param    options    Optional parameter: Options dictionary.
     * @return    Returns the List<ListEntityTypesResponse> response from the API call 
     */
    public List<ListEntityTypesResponse> listEntityTypes(
                final Double limit,
                final Double offset,
                final Options7Enum options
    ) throws Throwable {

        HttpRequest _request = _buildListEntityTypesRequest(limit, offset, options);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleListEntityTypesResponse(_context);
    }

    /**
     * If the `values` option is not in use, this operation returns a JSON array with the entity types.
     * Each element is a JSON object with information about the type:
     * * `type` : the entity type name.
     * * `attrs` : the set of attribute names along with all the entities of such type, represented in
     *   a JSON object whose keys are the attribute names and whose values contain information of such
     *   attributes (in particular a list of the types used by attributes with that name along with all the
     *   entities).
     * * `count` : the number of entities belonging to that type.
     * If the `values` option is used, the operation returns a JSON array with a list of entity type
     * names as strings.
     * Results are ordered by entity `type` in alphabetical order.
     * Response code:
     * * Successful operation uses 200 OK
     * * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
     *   more details.
     * @param    limit    Optional parameter: Limit the number of types to be retrieved.
     * @param    offset    Optional parameter: Skip a number of records.
     * @param    options    Optional parameter: Options dictionary.
     */
    public void listEntityTypesAsync(
                final Double limit,
                final Double offset,
                final Options7Enum options,
                final APICallBack<List<ListEntityTypesResponse>> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildListEntityTypesRequest(limit, offset, options);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            List<ListEntityTypesResponse> returnValue = _handleListEntityTypesResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for listEntityTypes
     */
    private HttpRequest _buildListEntityTypesRequest(
                final Double limit,
                final Double offset,
                final Options7Enum options) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/v2/types/");

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        if (limit != null) {
            _queryParameters.put("limit", limit);
        }
        if (offset != null) {
            _queryParameters.put("offset", offset);
        }
        if (options != null) {
            _queryParameters.put("options", (options != null) ? options.value() : null);
        }
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for listEntityTypes
     * @return An object of type List<ListEntityTypesResponse>
     */
    private List<ListEntityTypesResponse> _handleListEntityTypesResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        List<ListEntityTypesResponse> _result = APIHelper.deserialize(_responseBody,
									new TypeReference<List<ListEntityTypesResponse>>(){});

        return _result;
    }

    /**
     * This operation returns a JSON object with information about the type:
     * * `attrs` : the set of attribute names along with all the entities of such type, represented in
     *   a JSON object whose keys are the attribute names and whose values contain information of such
     *   attributes (in particular a list of the types used by attributes with that name along with all the
     *   entities).
     * * `count` : the number of entities belonging to that type.
     * Response code:
     * * Successful operation uses 200 OK
     * * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
     *   more details.
     * @param    entityType    Required parameter: Entity Type
     * @return    Returns the RetrieveEntityTypeResponse response from the API call 
     */
    public RetrieveEntityTypeResponse retrieveEntityType(
                final String entityType
    ) throws Throwable {

        HttpRequest _request = _buildRetrieveEntityTypeRequest(entityType);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleRetrieveEntityTypeResponse(_context);
    }

    /**
     * This operation returns a JSON object with information about the type:
     * * `attrs` : the set of attribute names along with all the entities of such type, represented in
     *   a JSON object whose keys are the attribute names and whose values contain information of such
     *   attributes (in particular a list of the types used by attributes with that name along with all the
     *   entities).
     * * `count` : the number of entities belonging to that type.
     * Response code:
     * * Successful operation uses 200 OK
     * * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
     *   more details.
     * @param    entityType    Required parameter: Entity Type
     */
    public void retrieveEntityTypeAsync(
                final String entityType,
                final APICallBack<RetrieveEntityTypeResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildRetrieveEntityTypeRequest(entityType);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            RetrieveEntityTypeResponse returnValue = _handleRetrieveEntityTypeResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for retrieveEntityType
     */
    private HttpRequest _buildRetrieveEntityTypeRequest(
                final String entityType) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/v2/types/{entityType}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("entityType", entityType);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for retrieveEntityType
     * @return An object of type RetrieveEntityTypeResponse
     */
    private RetrieveEntityTypeResponse _handleRetrieveEntityTypeResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        RetrieveEntityTypeResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<RetrieveEntityTypeResponse>(){});

        return _result;
    }

}
