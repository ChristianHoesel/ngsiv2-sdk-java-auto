/*
 * FIWARENGSIV2SpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package org.fiware.lab.orion.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import org.fiware.lab.orion.ApiHelper;
import org.fiware.lab.orion.AuthManager;
import org.fiware.lab.orion.Configuration;
import org.fiware.lab.orion.exceptions.ApiException;
import org.fiware.lab.orion.http.Headers;
import org.fiware.lab.orion.http.client.HttpCallback;
import org.fiware.lab.orion.http.client.HttpClient;
import org.fiware.lab.orion.http.client.HttpContext;
import org.fiware.lab.orion.http.request.HttpRequest;
import org.fiware.lab.orion.http.response.HttpResponse;
import org.fiware.lab.orion.http.response.HttpStringResponse;
import org.fiware.lab.orion.models.CreateSubscriptionRequest;
import org.fiware.lab.orion.models.DynamicResponse;
import org.fiware.lab.orion.models.ListSubscriptionsResponse;
import org.fiware.lab.orion.models.Options8Enum;
import org.fiware.lab.orion.models.UpdateSubscriptionRequest;

/**
 * This class lists all the endpoints of the groups.
 */
public final class SubscriptionsController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public SubscriptionsController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public SubscriptionsController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * Returns a list of all the subscriptions present in the system. Response: * Successful
     * operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See
     * subsection on "Error Responses" for more details.
     * @param  limit  Optional parameter: Limit the number of subscriptions to be retrieved
     * @param  offset  Optional parameter: Skip a number of subscriptions
     * @param  options  Optional parameter: Options dictionary
     * @return    Returns the List of ListSubscriptionsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<ListSubscriptionsResponse> listSubscriptions(
            final Double limit,
            final Double offset,
            final Options8Enum options) throws ApiException, IOException {
        HttpRequest request = buildListSubscriptionsRequest(limit, offset, options);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleListSubscriptionsResponse(context);
    }

    /**
     * Returns a list of all the subscriptions present in the system. Response: * Successful
     * operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See
     * subsection on "Error Responses" for more details.
     * @param  limit  Optional parameter: Limit the number of subscriptions to be retrieved
     * @param  offset  Optional parameter: Skip a number of subscriptions
     * @param  options  Optional parameter: Options dictionary
     * @return    Returns the List of ListSubscriptionsResponse response from the API call
     */
    public CompletableFuture<List<ListSubscriptionsResponse>> listSubscriptionsAsync(
            final Double limit,
            final Double offset,
            final Options8Enum options) {
        return makeHttpCallAsync(() -> buildListSubscriptionsRequest(limit, offset, options),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleListSubscriptionsResponse(context));
    }

    /**
     * Builds the HttpRequest object for listSubscriptions.
     */
    private HttpRequest buildListSubscriptionsRequest(
            final Double limit,
            final Double offset,
            final Options8Enum options) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v2/subscriptions");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("limit", limit);
        queryParameters.put("offset", offset);
        queryParameters.put("options",
                (options != null) ? options.value() : null);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for listSubscriptions.
     * @return An object of type List of ListSubscriptionsResponse
     */
    private List<ListSubscriptionsResponse> handleListSubscriptionsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        List<ListSubscriptionsResponse> result = ApiHelper.deserializeArray(responseBody,
                ListSubscriptionsResponse[].class);
        return result;
    }

    /**
     * Creates a new subscription. The subscription is represented by a JSON object as described at
     * the beginning of this section. Response: * Successful operation uses 201 Created * Errors use
     * a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for more
     * details.
     * @param  body  Required parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void createSubscription(
            final CreateSubscriptionRequest body) throws ApiException, IOException {
        HttpRequest request = buildCreateSubscriptionRequest(body);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        handleCreateSubscriptionResponse(context);
    }

    /**
     * Creates a new subscription. The subscription is represented by a JSON object as described at
     * the beginning of this section. Response: * Successful operation uses 201 Created * Errors use
     * a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for more
     * details.
     * @param  body  Required parameter: Example:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> createSubscriptionAsync(
            final CreateSubscriptionRequest body) {
        return makeHttpCallAsync(() -> buildCreateSubscriptionRequest(body),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleCreateSubscriptionResponse(context));
    }

    /**
     * Builds the HttpRequest object for createSubscription.
     */
    private HttpRequest buildCreateSubscriptionRequest(
            final CreateSubscriptionRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v2/subscriptions");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for createSubscription.
     * @return An object of type void
     */
    private Void handleCreateSubscriptionResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        return null;
    }

    /**
     * The response is the subscription represented by a JSON object as described at the beginning
     * of this section. Response: * Successful operation uses 200 OK * Errors use a non-2xx and
     * (optionally) an error payload. See subsection on "Error Responses" for more details.
     * @param  subscriptionId  Required parameter: subscription Id.
     * @return    Returns the DynamicResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DynamicResponse retrieveSubscription(
            final String subscriptionId) throws ApiException, IOException {
        HttpRequest request = buildRetrieveSubscriptionRequest(subscriptionId);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleRetrieveSubscriptionResponse(context);
    }

    /**
     * The response is the subscription represented by a JSON object as described at the beginning
     * of this section. Response: * Successful operation uses 200 OK * Errors use a non-2xx and
     * (optionally) an error payload. See subsection on "Error Responses" for more details.
     * @param  subscriptionId  Required parameter: subscription Id.
     * @return    Returns the DynamicResponse response from the API call
     */
    public CompletableFuture<DynamicResponse> retrieveSubscriptionAsync(
            final String subscriptionId) {
        return makeHttpCallAsync(() -> buildRetrieveSubscriptionRequest(subscriptionId),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleRetrieveSubscriptionResponse(context));
    }

    /**
     * Builds the HttpRequest object for retrieveSubscription.
     */
    private HttpRequest buildRetrieveSubscriptionRequest(
            final String subscriptionId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v2/subscriptions/{subscriptionId}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("subscriptionId",
                new SimpleEntry<Object, Boolean>(subscriptionId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for retrieveSubscription.
     * @return An object of type DynamicResponse
     */
    private DynamicResponse handleRetrieveSubscriptionResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        DynamicResponse result = new DynamicResponse(response);

        return result;
    }

    /**
     * Only the fields included in the request are updated in the subscription. Response: *
     * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error
     * payload. See subsection on "Error Responses" for more details.
     * @param  subscriptionId  Required parameter: subscription Id.
     * @param  body  Required parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void updateSubscription(
            final String subscriptionId,
            final UpdateSubscriptionRequest body) throws ApiException, IOException {
        HttpRequest request = buildUpdateSubscriptionRequest(subscriptionId, body);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        handleUpdateSubscriptionResponse(context);
    }

    /**
     * Only the fields included in the request are updated in the subscription. Response: *
     * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error
     * payload. See subsection on "Error Responses" for more details.
     * @param  subscriptionId  Required parameter: subscription Id.
     * @param  body  Required parameter: Example:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> updateSubscriptionAsync(
            final String subscriptionId,
            final UpdateSubscriptionRequest body) {
        return makeHttpCallAsync(() -> buildUpdateSubscriptionRequest(subscriptionId, body),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleUpdateSubscriptionResponse(context));
    }

    /**
     * Builds the HttpRequest object for updateSubscription.
     */
    private HttpRequest buildUpdateSubscriptionRequest(
            final String subscriptionId,
            final UpdateSubscriptionRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v2/subscriptions/{subscriptionId}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("subscriptionId",
                new SimpleEntry<Object, Boolean>(subscriptionId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().patchBody(queryBuilder, headers, null,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for updateSubscription.
     * @return An object of type void
     */
    private Void handleUpdateSubscriptionResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        return null;
    }

    /**
     * Cancels subscription. Response: * Successful operation uses 204 No Content * Errors use a
     * non-2xx and (optionally) an error payload. See subsection on "Error Responses" for more
     * details.
     * @param  subscriptionId  Required parameter: subscription Id.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void deleteSubscription(
            final String subscriptionId) throws ApiException, IOException {
        HttpRequest request = buildDeleteSubscriptionRequest(subscriptionId);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        handleDeleteSubscriptionResponse(context);
    }

    /**
     * Cancels subscription. Response: * Successful operation uses 204 No Content * Errors use a
     * non-2xx and (optionally) an error payload. See subsection on "Error Responses" for more
     * details.
     * @param  subscriptionId  Required parameter: subscription Id.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> deleteSubscriptionAsync(
            final String subscriptionId) {
        return makeHttpCallAsync(() -> buildDeleteSubscriptionRequest(subscriptionId),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleDeleteSubscriptionResponse(context));
    }

    /**
     * Builds the HttpRequest object for deleteSubscription.
     */
    private HttpRequest buildDeleteSubscriptionRequest(
            final String subscriptionId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v2/subscriptions/{subscriptionId}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("subscriptionId",
                new SimpleEntry<Object, Boolean>(subscriptionId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().delete(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for deleteSubscription.
     * @return An object of type void
     */
    private Void handleDeleteSubscriptionResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        return null;
    }

}