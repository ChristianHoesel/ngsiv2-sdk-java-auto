/*
 * FIWARENGSIV2SpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package org.fiware.lab.orion.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import org.fiware.lab.orion.ApiHelper;
import org.fiware.lab.orion.AuthManager;
import org.fiware.lab.orion.Configuration;
import org.fiware.lab.orion.exceptions.ApiException;
import org.fiware.lab.orion.http.Headers;
import org.fiware.lab.orion.http.client.HttpCallback;
import org.fiware.lab.orion.http.client.HttpClient;
import org.fiware.lab.orion.http.client.HttpContext;
import org.fiware.lab.orion.http.request.HttpRequest;
import org.fiware.lab.orion.http.response.HttpResponse;
import org.fiware.lab.orion.http.response.HttpStringResponse;
import org.fiware.lab.orion.models.GetAttributeValueResponse;
import org.fiware.lab.orion.models.UpdateAttributeValueRequest;

/**
 * This class lists all the endpoints of the groups.
 */
public final class AttributeValueController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public AttributeValueController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public AttributeValueController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * This operation returns the `value` property with the value of the attribute. * If attribute
     * value is JSON Array or Object: * If `Accept` header can be expanded to `application/json` or
     * `text/plain` return the value as a JSON with a response type of application/json or
     * text/plain (whichever is the first in `Accept` header or `application/json` in case of
     * `Accept: *`). * Else return a HTTP error "406 Not Acceptable: accepted MIME types:
     * application/json, text/plain" * If attribute value is a string, number, null or boolean: * If
     * `Accept` header can be expanded to text/plain return the value as text. In case of a string,
     * citation marks are used at the begining and end. * Else return a HTTP error "406 Not
     * Acceptable: accepted MIME types: text/plain" Response: * Successful operation uses 200 OK. *
     * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses"
     * for more details.
     * @param  entityId  Required parameter: Id of the entity in question
     * @param  attrName  Required parameter: Name of the attribute to be retrieved.
     * @param  type  Optional parameter: Entity type, to avoid ambiguity in case there are several
     *         entities with the same entity id.
     * @return    Returns the GetAttributeValueResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetAttributeValueResponse getAttributeValue(
            final String entityId,
            final String attrName,
            final String type) throws ApiException, IOException {
        HttpRequest request = buildGetAttributeValueRequest(entityId, attrName, type);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAttributeValueResponse(context);
    }

    /**
     * This operation returns the `value` property with the value of the attribute. * If attribute
     * value is JSON Array or Object: * If `Accept` header can be expanded to `application/json` or
     * `text/plain` return the value as a JSON with a response type of application/json or
     * text/plain (whichever is the first in `Accept` header or `application/json` in case of
     * `Accept: *`). * Else return a HTTP error "406 Not Acceptable: accepted MIME types:
     * application/json, text/plain" * If attribute value is a string, number, null or boolean: * If
     * `Accept` header can be expanded to text/plain return the value as text. In case of a string,
     * citation marks are used at the begining and end. * Else return a HTTP error "406 Not
     * Acceptable: accepted MIME types: text/plain" Response: * Successful operation uses 200 OK. *
     * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses"
     * for more details.
     * @param  entityId  Required parameter: Id of the entity in question
     * @param  attrName  Required parameter: Name of the attribute to be retrieved.
     * @param  type  Optional parameter: Entity type, to avoid ambiguity in case there are several
     *         entities with the same entity id.
     * @return    Returns the GetAttributeValueResponse response from the API call
     */
    public CompletableFuture<GetAttributeValueResponse> getAttributeValueAsync(
            final String entityId,
            final String attrName,
            final String type) {
        return makeHttpCallAsync(() -> buildGetAttributeValueRequest(entityId, attrName, type),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAttributeValueResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAttributeValue.
     */
    private HttpRequest buildGetAttributeValueRequest(
            final String entityId,
            final String attrName,
            final String type) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v2/entities/{entityId}/attrs/{attrName}/value");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("entityId",
                new SimpleEntry<Object, Boolean>(entityId, true));
        templateParameters.put("attrName",
                new SimpleEntry<Object, Boolean>(attrName, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("type", type);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAttributeValue.
     * @return An object of type GetAttributeValueResponse
     */
    private GetAttributeValueResponse handleGetAttributeValueResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetAttributeValueResponse result = ApiHelper.deserialize(responseBody,
                GetAttributeValueResponse.class);

        return result;
    }

    /**
     * The request payload is the new attribute value. * If the request payload MIME type is
     * `application/json`, then the value of the attribute is set to the JSON object or array coded
     * in the payload (if the payload is not a valid JSON document, then an error is returned). * If
     * the request payload MIME type is `text/plain`, then the following algorithm is applied to the
     * payload: * If the payload starts and ends with citation-marks (`"`), the value is taken as a
     * string (the citation marks themselves are not considered part of the string) * If `true` or
     * `false`, the value is taken as a boolean. * If `null`, the value is taken as null. * If these
     * first three tests 'fail', the text is interpreted as a number. * If not a valid number, then
     * an error is returned and the attribute's value is unchanged. The payload MIME type in the
     * request is specified in the `Content-Type` HTTP header. Response: * Successful operation uses
     * 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on
     * "Error Responses" for more details.
     * @param  entityId  Required parameter: Id of the entity to be updated.
     * @param  attrName  Required parameter: Attribute name.
     * @param  body  Required parameter: Example:
     * @param  type  Optional parameter: Entity type, to avoid ambiguity in case there are several
     *         entities with the same entity id.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void updateAttributeValue(
            final String entityId,
            final String attrName,
            final UpdateAttributeValueRequest body,
            final String type) throws ApiException, IOException {
        HttpRequest request = buildUpdateAttributeValueRequest(entityId, attrName, body, type);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        handleUpdateAttributeValueResponse(context);
    }

    /**
     * The request payload is the new attribute value. * If the request payload MIME type is
     * `application/json`, then the value of the attribute is set to the JSON object or array coded
     * in the payload (if the payload is not a valid JSON document, then an error is returned). * If
     * the request payload MIME type is `text/plain`, then the following algorithm is applied to the
     * payload: * If the payload starts and ends with citation-marks (`"`), the value is taken as a
     * string (the citation marks themselves are not considered part of the string) * If `true` or
     * `false`, the value is taken as a boolean. * If `null`, the value is taken as null. * If these
     * first three tests 'fail', the text is interpreted as a number. * If not a valid number, then
     * an error is returned and the attribute's value is unchanged. The payload MIME type in the
     * request is specified in the `Content-Type` HTTP header. Response: * Successful operation uses
     * 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on
     * "Error Responses" for more details.
     * @param  entityId  Required parameter: Id of the entity to be updated.
     * @param  attrName  Required parameter: Attribute name.
     * @param  body  Required parameter: Example:
     * @param  type  Optional parameter: Entity type, to avoid ambiguity in case there are several
     *         entities with the same entity id.
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> updateAttributeValueAsync(
            final String entityId,
            final String attrName,
            final UpdateAttributeValueRequest body,
            final String type) {
        return makeHttpCallAsync(() -> buildUpdateAttributeValueRequest(entityId, attrName, body,
                type),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleUpdateAttributeValueResponse(context));
    }

    /**
     * Builds the HttpRequest object for updateAttributeValue.
     */
    private HttpRequest buildUpdateAttributeValueRequest(
            final String entityId,
            final String attrName,
            final UpdateAttributeValueRequest body,
            final String type) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v2/entities/{entityId}/attrs/{attrName}/value");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("entityId",
                new SimpleEntry<Object, Boolean>(entityId, true));
        templateParameters.put("attrName",
                new SimpleEntry<Object, Boolean>(attrName, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("type", type);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().putBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for updateAttributeValue.
     * @return An object of type void
     */
    private Void handleUpdateAttributeValueResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        return null;
    }

}