/*
 * FIWARENGSIV2SpecificationLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package org.fiware.lab.orion.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;

import org.fiware.lab.orion.*;
import org.fiware.lab.orion.models.*;
import org.fiware.lab.orion.exceptions.*;
import org.fiware.lab.orion.http.client.HttpClient;
import org.fiware.lab.orion.http.client.HttpContext;
import org.fiware.lab.orion.http.request.HttpRequest;
import org.fiware.lab.orion.http.response.HttpResponse;
import org.fiware.lab.orion.http.response.HttpStringResponse;
import org.fiware.lab.orion.http.client.APICallBack;
import org.fiware.lab.orion.controllers.syncwrapper.APICallBackCatcher;

public class AttributeValueController extends BaseController {
    //private static variables for the singleton pattern
    private static final Object syncObject = new Object();
    private static AttributeValueController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the AttributeValueController class 
     */
    public static AttributeValueController getInstance() {
        if (null == instance) {
            synchronized (syncObject) {
                if (null == instance) {
                    instance = new AttributeValueController();
                }
            }
        }
        return instance;
    }

    /**
     * This operation returns the `value` property with the value of the attribute.
     * * If attribute value is JSON Array or Object:
     *   * If `Accept` header can be expanded to `application/json` or `text/plain` return the value as a JSON with a
     *     response type of application/json or text/plain (whichever is the first in `Accept` header or
     *     `application/json` in case of `Accept: */*`).
     *   * Else return a HTTP error "406 Not Acceptable: accepted MIME types: application/json, text/plain"
     * * If attribute value is a string, number, null or boolean:
     *   * If `Accept` header can be expanded to text/plain return the value as text. In case of a string, citation
     *     marks are used at the begining and end.
     *   * Else return a HTTP error "406 Not Acceptable: accepted MIME types: text/plain"
     * Response:
     * * Successful operation uses 200 OK.
     * * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
     *   more details.
     * @param    entityId    Required parameter: Id of the entity in question
     * @param    attrName    Required parameter: Name of the attribute to be retrieved.
     * @param    type    Optional parameter: Entity type, to avoid ambiguity in case there are several entities with the same entity id.
     * @return    Returns the GetAttributeValueResponse response from the API call 
     */
    public GetAttributeValueResponse getAttributeValue(
                final String entityId,
                final String attrName,
                final String type
    ) throws Throwable {

        HttpRequest _request = _buildGetAttributeValueRequest(entityId, attrName, type);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetAttributeValueResponse(_context);
    }

    /**
     * This operation returns the `value` property with the value of the attribute.
     * * If attribute value is JSON Array or Object:
     *   * If `Accept` header can be expanded to `application/json` or `text/plain` return the value as a JSON with a
     *     response type of application/json or text/plain (whichever is the first in `Accept` header or
     *     `application/json` in case of `Accept: */*`).
     *   * Else return a HTTP error "406 Not Acceptable: accepted MIME types: application/json, text/plain"
     * * If attribute value is a string, number, null or boolean:
     *   * If `Accept` header can be expanded to text/plain return the value as text. In case of a string, citation
     *     marks are used at the begining and end.
     *   * Else return a HTTP error "406 Not Acceptable: accepted MIME types: text/plain"
     * Response:
     * * Successful operation uses 200 OK.
     * * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
     *   more details.
     * @param    entityId    Required parameter: Id of the entity in question
     * @param    attrName    Required parameter: Name of the attribute to be retrieved.
     * @param    type    Optional parameter: Entity type, to avoid ambiguity in case there are several entities with the same entity id.
     */
    public void getAttributeValueAsync(
                final String entityId,
                final String attrName,
                final String type,
                final APICallBack<GetAttributeValueResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetAttributeValueRequest(entityId, attrName, type);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetAttributeValueResponse returnValue = _handleGetAttributeValueResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getAttributeValue
     */
    private HttpRequest _buildGetAttributeValueRequest(
                final String entityId,
                final String attrName,
                final String type) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/v2/entities/{entityId}/attrs/{attrName}/value");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("entityId", entityId);
        _templateParameters.put("attrName", attrName);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        if (type != null) {
            _queryParameters.put("type", type);
        }
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getAttributeValue
     * @return An object of type GetAttributeValueResponse
     */
    private GetAttributeValueResponse _handleGetAttributeValueResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetAttributeValueResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetAttributeValueResponse>(){});

        return _result;
    }

    /**
     * The request payload is the new attribute value.
     * * If the request payload MIME type is `application/json`, then the value of the attribute is set to
     *   the JSON object or array coded in the payload (if the payload is not a valid JSON document,
     *   then an error is returned).
     * * If the request payload MIME type is `text/plain`, then the following algorithm is applied to the
     *   payload:
     *   * If the payload starts and ends with citation-marks (`"`), the value is taken as a string
     *     (the citation marks themselves are not considered part of the string)
     *   * If `true` or `false`, the value is taken as a boolean.
     *   * If `null`, the value is taken as null.
     *   * If these first three tests 'fail', the text is interpreted as a number.
     *   * If not a valid number, then an error is returned and the attribute's value is unchanged.
     * The payload MIME type in the request is specified in the `Content-Type` HTTP header.
     * Response:
     * * Successful operation uses 204 No Content
     * * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
     *   more details.
     * @param    entityId    Required parameter: Id of the entity to be updated.
     * @param    attrName    Required parameter: Attribute name.
     * @param    contentType    Required parameter: Example: 
     * @param    body    Required parameter: Example: 
     * @param    type    Optional parameter: Entity type, to avoid ambiguity in case there are several entities with the same entity id.
     */
    public void updateAttributeValue(
                final String entityId,
                final String attrName,
                final String contentType,
                final UpdateAttributeValueRequest body,
                final String type
    ) throws Throwable {

        HttpRequest _request = _buildUpdateAttributeValueRequest(entityId, attrName, contentType, body, type);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        _handleUpdateAttributeValueResponse(_context);
    }

    /**
     * The request payload is the new attribute value.
     * * If the request payload MIME type is `application/json`, then the value of the attribute is set to
     *   the JSON object or array coded in the payload (if the payload is not a valid JSON document,
     *   then an error is returned).
     * * If the request payload MIME type is `text/plain`, then the following algorithm is applied to the
     *   payload:
     *   * If the payload starts and ends with citation-marks (`"`), the value is taken as a string
     *     (the citation marks themselves are not considered part of the string)
     *   * If `true` or `false`, the value is taken as a boolean.
     *   * If `null`, the value is taken as null.
     *   * If these first three tests 'fail', the text is interpreted as a number.
     *   * If not a valid number, then an error is returned and the attribute's value is unchanged.
     * The payload MIME type in the request is specified in the `Content-Type` HTTP header.
     * Response:
     * * Successful operation uses 204 No Content
     * * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
     *   more details.
     * @param    entityId    Required parameter: Id of the entity to be updated.
     * @param    attrName    Required parameter: Attribute name.
     * @param    contentType    Required parameter: Example: 
     * @param    body    Required parameter: Example: 
     * @param    type    Optional parameter: Entity type, to avoid ambiguity in case there are several entities with the same entity id.
     */
    public void updateAttributeValueAsync(
                final String entityId,
                final String attrName,
                final String contentType,
                final UpdateAttributeValueRequest body,
                final String type,
                final APICallBack<Object> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildUpdateAttributeValueRequest(entityId, attrName, contentType, body, type);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            _handleUpdateAttributeValueResponse(_context);
                            callBack.onSuccess(_context, null);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for updateAttributeValue
     */
    private HttpRequest _buildUpdateAttributeValueRequest(
                final String entityId,
                final String attrName,
                final String contentType,
                final UpdateAttributeValueRequest body,
                final String type) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/v2/entities/{entityId}/attrs/{attrName}/value");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("entityId", entityId);
        _templateParameters.put("attrName", attrName);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        if (type != null) {
            _queryParameters.put("type", type);
        }
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("Content-Type", contentType);
        _headers.put("user-agent", BaseController.userAgent);


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().putBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for updateAttributeValue
     */
    private void _handleUpdateAttributeValueResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);


    }

}
