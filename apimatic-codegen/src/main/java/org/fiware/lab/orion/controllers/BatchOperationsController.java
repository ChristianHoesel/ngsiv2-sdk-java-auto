/*
 * FIWARENGSIV2SpecificationLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package org.fiware.lab.orion.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;

import org.fiware.lab.orion.*;
import org.fiware.lab.orion.models.*;
import org.fiware.lab.orion.exceptions.*;
import org.fiware.lab.orion.http.client.HttpClient;
import org.fiware.lab.orion.http.client.HttpContext;
import org.fiware.lab.orion.http.request.HttpRequest;
import org.fiware.lab.orion.http.response.HttpResponse;
import org.fiware.lab.orion.http.response.HttpStringResponse;
import org.fiware.lab.orion.http.client.APICallBack;
import org.fiware.lab.orion.controllers.syncwrapper.APICallBackCatcher;

public class BatchOperationsController extends BaseController {
    //private static variables for the singleton pattern
    private static final Object syncObject = new Object();
    private static BatchOperationsController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the BatchOperationsController class 
     */
    public static BatchOperationsController getInstance() {
        if (null == instance) {
            synchronized (syncObject) {
                if (null == instance) {
                    instance = new BatchOperationsController();
                }
            }
        }
        return instance;
    }

    /**
     * This operation allows to create, update and/or delete several entities in a single batch operation.
     * The payload is an object with two properties:
     * + `actionType`, to specify the kind of update action to do: either `append`, `appendStrict`, `update`,
     *   `delete`, or `replace`.
     * + `entities`, an array of entities, each entity specified using the JSON entity representation format
     *   (described in the section "JSON Entity Representation").
     * This operation is split in as many individual operations as entities in the `entities` vector, so
     * the `actionType` is executed for each one of them. Depending on the `actionType`, a mapping with
     * regular non-batch operations can be done:
     * * `append`: maps to `POST /v2/entities` (if the entity does not already exist) or `POST /v2/entities/<id>/attrs`
     *   (if the entity already exists).
     * * `appendStrict`: maps to `POST /v2/entities` (if the entity does not already exist) or
     *   `POST /v2/entities/<id>/attrs?options=append` (if the entity already exists).
     * * `update`: maps to `PATCH /v2/entities/<id>/attrs`.
     * * `delete`: maps to `DELETE /v2/entities/<id>/attrs/<attrName>` on every attribute included in the entity or
     *   to `DELETE /v2/entities/<id>` if no attribute were included in the entity.
     * * `replace`: maps to `PUT /v2/entities/<id>/attrs`.
     * Response:
     * * Successful operation uses 204 No Content.
     * * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
     *   more details.
     * @param    contentType    Required parameter: Example: 
     * @param    body    Required parameter: Example: 
     * @param    options    Optional parameter: Options dictionary
     */
    public void update(
                final String contentType,
                final UpdateRequest body,
                final Options5Enum options
    ) throws Throwable {

        HttpRequest _request = _buildUpdateRequest(contentType, body, options);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        _handleUpdateResponse(_context);
    }

    /**
     * This operation allows to create, update and/or delete several entities in a single batch operation.
     * The payload is an object with two properties:
     * + `actionType`, to specify the kind of update action to do: either `append`, `appendStrict`, `update`,
     *   `delete`, or `replace`.
     * + `entities`, an array of entities, each entity specified using the JSON entity representation format
     *   (described in the section "JSON Entity Representation").
     * This operation is split in as many individual operations as entities in the `entities` vector, so
     * the `actionType` is executed for each one of them. Depending on the `actionType`, a mapping with
     * regular non-batch operations can be done:
     * * `append`: maps to `POST /v2/entities` (if the entity does not already exist) or `POST /v2/entities/<id>/attrs`
     *   (if the entity already exists).
     * * `appendStrict`: maps to `POST /v2/entities` (if the entity does not already exist) or
     *   `POST /v2/entities/<id>/attrs?options=append` (if the entity already exists).
     * * `update`: maps to `PATCH /v2/entities/<id>/attrs`.
     * * `delete`: maps to `DELETE /v2/entities/<id>/attrs/<attrName>` on every attribute included in the entity or
     *   to `DELETE /v2/entities/<id>` if no attribute were included in the entity.
     * * `replace`: maps to `PUT /v2/entities/<id>/attrs`.
     * Response:
     * * Successful operation uses 204 No Content.
     * * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
     *   more details.
     * @param    contentType    Required parameter: Example: 
     * @param    body    Required parameter: Example: 
     * @param    options    Optional parameter: Options dictionary
     */
    public void updateAsync(
                final String contentType,
                final UpdateRequest body,
                final Options5Enum options,
                final APICallBack<Object> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildUpdateRequest(contentType, body, options);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            _handleUpdateResponse(_context);
                            callBack.onSuccess(_context, null);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for update
     */
    private HttpRequest _buildUpdateRequest(
                final String contentType,
                final UpdateRequest body,
                final Options5Enum options) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/v2/op/update");

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        if (options != null) {
            _queryParameters.put("options", (options != null) ? options.value() : null);
        }
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("Content-Type", contentType);
        _headers.put("user-agent", BaseController.userAgent);


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for update
     */
    private void _handleUpdateResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);


    }

    /**
     * The response payload is an Array containing one object per matching entity, or an empty array `[]` if 
     * no entities are found. The entities follow the JSON entity representation format
     * (described in the section "JSON Entity Representation").
     * The payload may contain the following elements (all of them optional):
     * + `entities`: a list of entites to search for. Each element is represented by a JSON object with the
     *   following elements:
     *     + `id` or `idPattern`: Id or pattern of the affected entities. Both cannot be used at the same
     *       time, but one of them must be present.
     *     + `type` or `typePattern`: Type or type pattern of the entities to search for. Both cannot be used at
     *       the same time. If omitted, it means "any entity type".
     * + `attrs`: List of attributes to be provided (if not specified, all attributes).
     * + `expression`: an expression composed of `q`, `mq`, `georel`, `geometry` and `coords` (see "List
     *    entities" operation above about this field).
     * + `metadata`: a list of metadata names to include in the response.
     *    See "Filtering out attributes and metadata" section for more detail.
     * Response code:
     * * Successful operation uses 200 OK
     * * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
     *   more details.
     * @param    contentType    Required parameter: Example: 
     * @param    body    Required parameter: Example: 
     * @param    limit    Optional parameter: Limit the number of entities to be retrieved.
     * @param    offset    Optional parameter: Skip a number of records.
     * @param    orderBy    Optional parameter: Criteria for ordering results. See "Ordering Results" section for details.
     * @param    options    Optional parameter: Options dictionary
     * @return    Returns the List<QueryResponse> response from the API call 
     */
    public List<QueryResponse> createQuery(
                final String contentType,
                final QueryRequest body,
                final Double limit,
                final Double offset,
                final String orderBy,
                final OptionsEnum options
    ) throws Throwable {

        HttpRequest _request = _buildCreateQueryRequest(contentType, body, limit, offset, orderBy, options);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateQueryResponse(_context);
    }

    /**
     * The response payload is an Array containing one object per matching entity, or an empty array `[]` if 
     * no entities are found. The entities follow the JSON entity representation format
     * (described in the section "JSON Entity Representation").
     * The payload may contain the following elements (all of them optional):
     * + `entities`: a list of entites to search for. Each element is represented by a JSON object with the
     *   following elements:
     *     + `id` or `idPattern`: Id or pattern of the affected entities. Both cannot be used at the same
     *       time, but one of them must be present.
     *     + `type` or `typePattern`: Type or type pattern of the entities to search for. Both cannot be used at
     *       the same time. If omitted, it means "any entity type".
     * + `attrs`: List of attributes to be provided (if not specified, all attributes).
     * + `expression`: an expression composed of `q`, `mq`, `georel`, `geometry` and `coords` (see "List
     *    entities" operation above about this field).
     * + `metadata`: a list of metadata names to include in the response.
     *    See "Filtering out attributes and metadata" section for more detail.
     * Response code:
     * * Successful operation uses 200 OK
     * * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
     *   more details.
     * @param    contentType    Required parameter: Example: 
     * @param    body    Required parameter: Example: 
     * @param    limit    Optional parameter: Limit the number of entities to be retrieved.
     * @param    offset    Optional parameter: Skip a number of records.
     * @param    orderBy    Optional parameter: Criteria for ordering results. See "Ordering Results" section for details.
     * @param    options    Optional parameter: Options dictionary
     */
    public void createQueryAsync(
                final String contentType,
                final QueryRequest body,
                final Double limit,
                final Double offset,
                final String orderBy,
                final OptionsEnum options,
                final APICallBack<List<QueryResponse>> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateQueryRequest(contentType, body, limit, offset, orderBy, options);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            List<QueryResponse> returnValue = _handleCreateQueryResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createQuery
     */
    private HttpRequest _buildCreateQueryRequest(
                final String contentType,
                final QueryRequest body,
                final Double limit,
                final Double offset,
                final String orderBy,
                final OptionsEnum options) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/v2/op/query");

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        if (limit != null) {
            _queryParameters.put("limit", limit);
        }
        if (offset != null) {
            _queryParameters.put("offset", offset);
        }
        if (orderBy != null) {
            _queryParameters.put("orderBy", orderBy);
        }
        if (options != null) {
            _queryParameters.put("options", (options != null) ? options.value() : null);
        }
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("Content-Type", contentType);
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createQuery
     * @return An object of type List<QueryResponse>
     */
    private List<QueryResponse> _handleCreateQueryResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        List<QueryResponse> _result = APIHelper.deserialize(_responseBody,
									new TypeReference<List<QueryResponse>>(){});

        return _result;
    }

    /**
     * This operation is intended to consume a notification payload so that all the entity data included by such notification is persisted, overwriting if necessary.
     * This operation is useful when one NGSIv2 endpoint is subscribed to another NGSIv2 endpoint (federation scenarios). 
     * The request payload must be an NGSIv2 notification payload. 
     * The behaviour must be exactly the same as `POST /v2/op/update` with `actionType` equal to `append`.
     * Response code:
     * * Successful operation uses 200 OK
     * * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
     *   more details.
     * @param    contentType    Required parameter: Example: 
     * @param    body    Required parameter: Example: 
     * @param    options    Optional parameter: Options dictionary
     */
    public void createNotify(
                final String contentType,
                final NotifyRequest body,
                final Options5Enum options
    ) throws Throwable {

        HttpRequest _request = _buildCreateNotifyRequest(contentType, body, options);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        _handleCreateNotifyResponse(_context);
    }

    /**
     * This operation is intended to consume a notification payload so that all the entity data included by such notification is persisted, overwriting if necessary.
     * This operation is useful when one NGSIv2 endpoint is subscribed to another NGSIv2 endpoint (federation scenarios). 
     * The request payload must be an NGSIv2 notification payload. 
     * The behaviour must be exactly the same as `POST /v2/op/update` with `actionType` equal to `append`.
     * Response code:
     * * Successful operation uses 200 OK
     * * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
     *   more details.
     * @param    contentType    Required parameter: Example: 
     * @param    body    Required parameter: Example: 
     * @param    options    Optional parameter: Options dictionary
     */
    public void createNotifyAsync(
                final String contentType,
                final NotifyRequest body,
                final Options5Enum options,
                final APICallBack<Object> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateNotifyRequest(contentType, body, options);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            _handleCreateNotifyResponse(_context);
                            callBack.onSuccess(_context, null);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createNotify
     */
    private HttpRequest _buildCreateNotifyRequest(
                final String contentType,
                final NotifyRequest body,
                final Options5Enum options) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/v2/op/notify");

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        if (options != null) {
            _queryParameters.put("options", (options != null) ? options.value() : null);
        }
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("Content-Type", contentType);
        _headers.put("user-agent", BaseController.userAgent);


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createNotify
     */
    private void _handleCreateNotifyResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);


    }

}
